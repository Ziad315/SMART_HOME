
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  000035f8  0000366c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ab4  00000000  00000000  0000372c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bfb  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000708b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000aacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ad59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4a 13 	call	0x2694	; 0x2694 <main>
      7a:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 ef       	ldi	r26, 0xF5	; 245
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 ef       	ldi	r24, 0xF5	; 245
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
#include "ADC_interface.h"
#include "ADC_priv.h"


void ADC_init            (void              )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
#if ADC_mode == AREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);

#elif ADC_mode == AVCC
	SET_BIT(ADMUX,REFS0);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 64       	ori	r24, 0x40	; 64
     b4a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	8c 93       	st	X, r24


#endif

#if ADC_RESOLUTION_MODE  ==	 ADC_RESOLUTION_8_BITS
	SET_BIT(ADMUX,ADLAR);
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	8c 93       	st	X, r24
#endif



#if CONVERSION_MODE	 == SINGLE_CONVERSION_MODE
	CLR_BIT(ADCSRA,ADATE);
     b68:	a6 e2       	ldi	r26, 0x26	; 38
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e6 e2       	ldi	r30, 0x26	; 38
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 7d       	andi	r24, 0xDF	; 223
     b74:	8c 93       	st	X, r24




	/*prescale*/
	CLR_BIT(ADCSRA,ADPS0);
     b76:	a6 e2       	ldi	r26, 0x26	; 38
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8e 7f       	andi	r24, 0xFE	; 254
     b82:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS1);
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8d 7f       	andi	r24, 0xFD	; 253
     b90:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS2);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	8c 93       	st	X, r24

   ADCSRA |= PRESCALER;
     ba0:	a6 e2       	ldi	r26, 0x26	; 38
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 e2       	ldi	r30, 0x26	; 38
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	87 60       	ori	r24, 0x07	; 7
     bac:	8c 93       	st	X, r24
SET_BIT(ADCSRA,ADEN);
     bae:	a6 e2       	ldi	r26, 0x26	; 38
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e6 e2       	ldi	r30, 0x26	; 38
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 68       	ori	r24, 0x80	; 128
     bba:	8c 93       	st	X, r24
}
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <ADC_StartConversion>:


uint8 ADC_StartConversion(uint8 copy_channal)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	0f 92       	push	r0
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	89 83       	std	Y+1, r24	; 0x01
	    CLR_BIT(ADMUX,MUX0);
     bce:	a7 e2       	ldi	r26, 0x27	; 39
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e2       	ldi	r30, 0x27	; 39
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8e 7f       	andi	r24, 0xFE	; 254
     bda:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8b 7f       	andi	r24, 0xFB	; 251
     bf6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
     bf8:	a7 e2       	ldi	r26, 0x27	; 39
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e7 e2       	ldi	r30, 0x27	; 39
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	87 7f       	andi	r24, 0xF7	; 247
     c04:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX4);
     c06:	a7 e2       	ldi	r26, 0x27	; 39
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e7 e2       	ldi	r30, 0x27	; 39
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	8f 7e       	andi	r24, 0xEF	; 239
     c12:	8c 93       	st	X, r24

		ADMUX |=copy_channal;
     c14:	a7 e2       	ldi	r26, 0x27	; 39
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e2       	ldi	r30, 0x27	; 39
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	90 81       	ld	r25, Z
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	89 2b       	or	r24, r25
     c22:	8c 93       	st	X, r24
		 SET_BIT(ADCSRA,ADSC);
     c24:	a6 e2       	ldi	r26, 0x26	; 38
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e6 e2       	ldi	r30, 0x26	; 38
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 64       	ori	r24, 0x40	; 64
     c30:	8c 93       	st	X, r24
		 while(!(GET_BIT(ADCSRA,ADIF))==LOW);
     c32:	e6 e2       	ldi	r30, 0x26	; 38
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	82 95       	swap	r24
     c3a:	8f 70       	andi	r24, 0x0F	; 15
     c3c:	88 2f       	mov	r24, r24
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	81 70       	andi	r24, 0x01	; 1
     c42:	90 70       	andi	r25, 0x00	; 0
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	a9 f7       	brne	.-22     	; 0xc32 <ADC_StartConversion+0x70>
		 SET_BIT(ADCSRA,ADIF);
     c48:	a6 e2       	ldi	r26, 0x26	; 38
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e6 e2       	ldi	r30, 0x26	; 38
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 61       	ori	r24, 0x10	; 16
     c54:	8c 93       	st	X, r24
		 return ADCH;
     c56:	e5 e2       	ldi	r30, 0x25	; 37
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
}
     c5c:	0f 90       	pop	r0
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <DIO_setPinDirection>:
#include "DIO_Reg.h"
#include "DIO_interface.h"

/*Set pin direction INPUT or OUTPUT*/
uint8 DIO_setPinDirection(uint8 copy_port ,uint8 copy_pin ,uint8 copy_direction )
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	28 97       	sbiw	r28, 0x08	; 8
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	8a 83       	std	Y+2, r24	; 0x02
     c7a:	6b 83       	std	Y+3, r22	; 0x03
     c7c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
     c7e:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pin <= PIN7)
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	88 30       	cpi	r24, 0x08	; 8
     c84:	08 f0       	brcs	.+2      	; 0xc88 <DIO_setPinDirection+0x24>
     c86:	f1 c0       	rjmp	.+482    	; 0xe6a <DIO_setPinDirection+0x206>
	{
		if(copy_direction == OUTPUT)
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <DIO_setPinDirection+0x2c>
     c8e:	72 c0       	rjmp	.+228    	; 0xd74 <DIO_setPinDirection+0x110>
		{
			switch(copy_port)
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	38 87       	std	Y+8, r19	; 0x08
     c98:	2f 83       	std	Y+7, r18	; 0x07
     c9a:	8f 81       	ldd	r24, Y+7	; 0x07
     c9c:	98 85       	ldd	r25, Y+8	; 0x08
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	91 05       	cpc	r25, r1
     ca2:	49 f1       	breq	.+82     	; 0xcf6 <DIO_setPinDirection+0x92>
     ca4:	2f 81       	ldd	r18, Y+7	; 0x07
     ca6:	38 85       	ldd	r19, Y+8	; 0x08
     ca8:	22 30       	cpi	r18, 0x02	; 2
     caa:	31 05       	cpc	r19, r1
     cac:	2c f4       	brge	.+10     	; 0xcb8 <DIO_setPinDirection+0x54>
     cae:	8f 81       	ldd	r24, Y+7	; 0x07
     cb0:	98 85       	ldd	r25, Y+8	; 0x08
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	61 f0       	breq	.+24     	; 0xcce <DIO_setPinDirection+0x6a>
     cb6:	5b c0       	rjmp	.+182    	; 0xd6e <DIO_setPinDirection+0x10a>
     cb8:	2f 81       	ldd	r18, Y+7	; 0x07
     cba:	38 85       	ldd	r19, Y+8	; 0x08
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	71 f1       	breq	.+92     	; 0xd1e <DIO_setPinDirection+0xba>
     cc2:	8f 81       	ldd	r24, Y+7	; 0x07
     cc4:	98 85       	ldd	r25, Y+8	; 0x08
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	91 05       	cpc	r25, r1
     cca:	e9 f1       	breq	.+122    	; 0xd46 <DIO_setPinDirection+0xe2>
     ccc:	50 c0       	rjmp	.+160    	; 0xd6e <DIO_setPinDirection+0x10a>
	       {
				case DIO_PORTA: SET_BIT(DDRA ,copy_pin); break;
     cce:	aa e3       	ldi	r26, 0x3A	; 58
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ea e3       	ldi	r30, 0x3A	; 58
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_setPinDirection+0x88>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_setPinDirection+0x84>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	bc c0       	rjmp	.+376    	; 0xe6e <DIO_setPinDirection+0x20a>
				case DIO_PORTB: SET_BIT(DDRB ,copy_pin);break;
     cf6:	a7 e3       	ldi	r26, 0x37	; 55
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e7 e3       	ldi	r30, 0x37	; 55
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_setPinDirection+0xb0>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_setPinDirection+0xac>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	a8 c0       	rjmp	.+336    	; 0xe6e <DIO_setPinDirection+0x20a>
				case DIO_PORTC: SET_BIT(DDRC ,copy_pin);break;
     d1e:	a4 e3       	ldi	r26, 0x34	; 52
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e4 e3       	ldi	r30, 0x34	; 52
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_setPinDirection+0xd8>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_setPinDirection+0xd4>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	94 c0       	rjmp	.+296    	; 0xe6e <DIO_setPinDirection+0x20a>
                case DIO_PORTD: SET_BIT(DDRD ,copy_pin);break;
     d46:	a1 e3       	ldi	r26, 0x31	; 49
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e1 e3       	ldi	r30, 0x31	; 49
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_setPinDirection+0x100>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DIO_setPinDirection+0xfc>
     d68:	84 2b       	or	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	80 c0       	rjmp	.+256    	; 0xe6e <DIO_setPinDirection+0x20a>
                default:local_errorStatus=1;break;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	7d c0       	rjmp	.+250    	; 0xe6e <DIO_setPinDirection+0x20a>
	       }
		}
		else if(copy_direction ==INPUT)
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	88 23       	and	r24, r24
     d78:	09 f0       	breq	.+2      	; 0xd7c <DIO_setPinDirection+0x118>
     d7a:	79 c0       	rjmp	.+242    	; 0xe6e <DIO_setPinDirection+0x20a>
		{
                switch(copy_port)
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	3e 83       	std	Y+6, r19	; 0x06
     d84:	2d 83       	std	Y+5, r18	; 0x05
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	91 05       	cpc	r25, r1
     d8e:	59 f1       	breq	.+86     	; 0xde6 <DIO_setPinDirection+0x182>
     d90:	2d 81       	ldd	r18, Y+5	; 0x05
     d92:	3e 81       	ldd	r19, Y+6	; 0x06
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	2c f4       	brge	.+10     	; 0xda4 <DIO_setPinDirection+0x140>
     d9a:	8d 81       	ldd	r24, Y+5	; 0x05
     d9c:	9e 81       	ldd	r25, Y+6	; 0x06
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	69 f0       	breq	.+26     	; 0xdbc <DIO_setPinDirection+0x158>
     da2:	60 c0       	rjmp	.+192    	; 0xe64 <DIO_setPinDirection+0x200>
     da4:	2d 81       	ldd	r18, Y+5	; 0x05
     da6:	3e 81       	ldd	r19, Y+6	; 0x06
     da8:	22 30       	cpi	r18, 0x02	; 2
     daa:	31 05       	cpc	r19, r1
     dac:	89 f1       	breq	.+98     	; 0xe10 <DIO_setPinDirection+0x1ac>
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <DIO_setPinDirection+0x156>
     db8:	40 c0       	rjmp	.+128    	; 0xe3a <DIO_setPinDirection+0x1d6>
     dba:	54 c0       	rjmp	.+168    	; 0xe64 <DIO_setPinDirection+0x200>
                {
					case DIO_PORTA: CLR_BIT(DDRA ,copy_pin);break;
     dbc:	aa e3       	ldi	r26, 0x3A	; 58
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	ea e3       	ldi	r30, 0x3A	; 58
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_setPinDirection+0x176>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_setPinDirection+0x172>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	44 c0       	rjmp	.+136    	; 0xe6e <DIO_setPinDirection+0x20a>
					case DIO_PORTB: CLR_BIT(DDRB ,copy_pin);break;
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_setPinDirection+0x1a0>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_setPinDirection+0x19c>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	2f c0       	rjmp	.+94     	; 0xe6e <DIO_setPinDirection+0x20a>
					case DIO_PORTC: CLR_BIT(DDRC ,copy_pin);break;
     e10:	a4 e3       	ldi	r26, 0x34	; 52
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e4 e3       	ldi	r30, 0x34	; 52
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_setPinDirection+0x1ca>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_setPinDirection+0x1c6>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	1a c0       	rjmp	.+52     	; 0xe6e <DIO_setPinDirection+0x20a>
					case DIO_PORTD: CLR_BIT(DDRD ,copy_pin);break;
     e3a:	a1 e3       	ldi	r26, 0x31	; 49
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e1 e3       	ldi	r30, 0x31	; 49
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_setPinDirection+0x1f4>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_setPinDirection+0x1f0>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <DIO_setPinDirection+0x20a>
					default:local_errorStatus=1;break;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_setPinDirection+0x20a>
                }
		}
	}
	else
	{
		local_errorStatus=1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_errorStatus;
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e70:	28 96       	adiw	r28, 0x08	; 8
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <DIO_setPinValue>:

/*Set pin Value LOW or HIGH*/
uint8 DIO_setPinValue(uint8 copy_port,uint8 copy_pin,uint8 copy_val)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	28 97       	sbiw	r28, 0x08	; 8
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	6b 83       	std	Y+3, r22	; 0x03
     e9a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
     e9c:	19 82       	std	Y+1, r1	; 0x01
		if(copy_pin <= PIN7)
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	88 30       	cpi	r24, 0x08	; 8
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <DIO_setPinValue+0x24>
     ea4:	f3 c0       	rjmp	.+486    	; 0x108c <DIO_setPinValue+0x20a>
		{
			if(copy_val == HIGH)
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	09 f0       	breq	.+2      	; 0xeae <DIO_setPinValue+0x2c>
     eac:	72 c0       	rjmp	.+228    	; 0xf92 <DIO_setPinValue+0x110>
			{
				switch(copy_port)
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	38 87       	std	Y+8, r19	; 0x08
     eb6:	2f 83       	std	Y+7, r18	; 0x07
     eb8:	8f 81       	ldd	r24, Y+7	; 0x07
     eba:	98 85       	ldd	r25, Y+8	; 0x08
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	49 f1       	breq	.+82     	; 0xf14 <DIO_setPinValue+0x92>
     ec2:	2f 81       	ldd	r18, Y+7	; 0x07
     ec4:	38 85       	ldd	r19, Y+8	; 0x08
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_setPinValue+0x54>
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	61 f0       	breq	.+24     	; 0xeec <DIO_setPinValue+0x6a>
     ed4:	5b c0       	rjmp	.+182    	; 0xf8c <DIO_setPinValue+0x10a>
     ed6:	2f 81       	ldd	r18, Y+7	; 0x07
     ed8:	38 85       	ldd	r19, Y+8	; 0x08
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	71 f1       	breq	.+92     	; 0xf3c <DIO_setPinValue+0xba>
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	98 85       	ldd	r25, Y+8	; 0x08
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	e9 f1       	breq	.+122    	; 0xf64 <DIO_setPinValue+0xe2>
     eea:	50 c0       	rjmp	.+160    	; 0xf8c <DIO_setPinValue+0x10a>
				       {
							case DIO_PORTA: SET_BIT(PORTA ,copy_pin);break;
     eec:	ab e3       	ldi	r26, 0x3B	; 59
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	eb e3       	ldi	r30, 0x3B	; 59
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_setPinValue+0x88>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_setPinValue+0x84>
     f0e:	84 2b       	or	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	bc c0       	rjmp	.+376    	; 0x108c <DIO_setPinValue+0x20a>
							case DIO_PORTB: SET_BIT(PORTB ,copy_pin);break;
     f14:	a8 e3       	ldi	r26, 0x38	; 56
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e8 e3       	ldi	r30, 0x38	; 56
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_setPinValue+0xb0>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_setPinValue+0xac>
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	a8 c0       	rjmp	.+336    	; 0x108c <DIO_setPinValue+0x20a>
							case DIO_PORTC: SET_BIT(PORTC ,copy_pin);break;
     f3c:	a5 e3       	ldi	r26, 0x35	; 53
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e3       	ldi	r30, 0x35	; 53
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_setPinValue+0xd8>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_setPinValue+0xd4>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	94 c0       	rjmp	.+296    	; 0x108c <DIO_setPinValue+0x20a>
			                case DIO_PORTD: SET_BIT(PORTD ,copy_pin);break;
     f64:	a2 e3       	ldi	r26, 0x32	; 50
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e2 e3       	ldi	r30, 0x32	; 50
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_setPinValue+0x100>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_setPinValue+0xfc>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	80 c0       	rjmp	.+256    	; 0x108c <DIO_setPinValue+0x20a>
			                default:local_errorStatus=1;break;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	7d c0       	rjmp	.+250    	; 0x108c <DIO_setPinValue+0x20a>
				       }
			}
			else if(copy_val == LOW)
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	88 23       	and	r24, r24
     f96:	09 f0       	breq	.+2      	; 0xf9a <DIO_setPinValue+0x118>
     f98:	77 c0       	rjmp	.+238    	; 0x1088 <DIO_setPinValue+0x206>
			{
			    switch(copy_port)
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3e 83       	std	Y+6, r19	; 0x06
     fa2:	2d 83       	std	Y+5, r18	; 0x05
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	91 05       	cpc	r25, r1
     fac:	59 f1       	breq	.+86     	; 0x1004 <DIO_setPinValue+0x182>
     fae:	2d 81       	ldd	r18, Y+5	; 0x05
     fb0:	3e 81       	ldd	r19, Y+6	; 0x06
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <DIO_setPinValue+0x140>
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	69 f0       	breq	.+26     	; 0xfda <DIO_setPinValue+0x158>
     fc0:	60 c0       	rjmp	.+192    	; 0x1082 <DIO_setPinValue+0x200>
     fc2:	2d 81       	ldd	r18, Y+5	; 0x05
     fc4:	3e 81       	ldd	r19, Y+6	; 0x06
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	89 f1       	breq	.+98     	; 0x102e <DIO_setPinValue+0x1ac>
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_setPinValue+0x156>
     fd6:	40 c0       	rjmp	.+128    	; 0x1058 <DIO_setPinValue+0x1d6>
     fd8:	54 c0       	rjmp	.+168    	; 0x1082 <DIO_setPinValue+0x200>
			                {
								case DIO_PORTA: CLR_BIT(PORTA ,copy_pin);break;
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_setPinValue+0x176>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_setPinValue+0x172>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	44 c0       	rjmp	.+136    	; 0x108c <DIO_setPinValue+0x20a>
								case DIO_PORTB: CLR_BIT(PORTB ,copy_pin);break;
    1004:	a8 e3       	ldi	r26, 0x38	; 56
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e8 e3       	ldi	r30, 0x38	; 56
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_setPinValue+0x1a0>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_setPinValue+0x19c>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	2f c0       	rjmp	.+94     	; 0x108c <DIO_setPinValue+0x20a>
								case DIO_PORTC: CLR_BIT(PORTC ,copy_pin);break;
    102e:	a5 e3       	ldi	r26, 0x35	; 53
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e3       	ldi	r30, 0x35	; 53
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_setPinValue+0x1ca>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_setPinValue+0x1c6>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	1a c0       	rjmp	.+52     	; 0x108c <DIO_setPinValue+0x20a>
								case DIO_PORTD: CLR_BIT(PORTD ,copy_pin);break;
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_setPinValue+0x1f4>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_setPinValue+0x1f0>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	05 c0       	rjmp	.+10     	; 0x108c <DIO_setPinValue+0x20a>
								default:local_errorStatus=1;break;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_setPinValue+0x20a>
			                }
			}
			else
			{
				local_errorStatus=1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		return local_errorStatus;
    108c:	89 81       	ldd	r24, Y+1	; 0x01

}
    108e:	28 96       	adiw	r28, 0x08	; 8
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_setPortDirection>:
/*This Function Set PORT value to be INPUT or OUTPUT*/
uint8 DIO_setPortDirection(uint8 copy_port,uint8 copy_direction)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	27 97       	sbiw	r28, 0x07	; 7
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	8a 83       	std	Y+2, r24	; 0x02
    10b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=0;
    10b8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_direction== OUTPUT)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	b1 f5       	brne	.+108    	; 0x112c <DIO_setPortDirection+0x8c>
	{
		switch(copy_port)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3f 83       	std	Y+7, r19	; 0x07
    10c8:	2e 83       	std	Y+6, r18	; 0x06
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	9f 81       	ldd	r25, Y+7	; 0x07
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	d1 f0       	breq	.+52     	; 0x1108 <DIO_setPortDirection+0x68>
    10d4:	2e 81       	ldd	r18, Y+6	; 0x06
    10d6:	3f 81       	ldd	r19, Y+7	; 0x07
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <DIO_setPortDirection+0x48>
    10de:	8e 81       	ldd	r24, Y+6	; 0x06
    10e0:	9f 81       	ldd	r25, Y+7	; 0x07
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <DIO_setPortDirection+0x5e>
    10e6:	1f c0       	rjmp	.+62     	; 0x1126 <DIO_setPortDirection+0x86>
    10e8:	2e 81       	ldd	r18, Y+6	; 0x06
    10ea:	3f 81       	ldd	r19, Y+7	; 0x07
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <DIO_setPortDirection+0x72>
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	9f 81       	ldd	r25, Y+7	; 0x07
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	81 f0       	breq	.+32     	; 0x111c <DIO_setPortDirection+0x7c>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <DIO_setPortDirection+0x86>
		{
		case DIO_PORTA:DDRA =0xff;break;
    10fe:	ea e3       	ldi	r30, 0x3A	; 58
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	80 83       	st	Z, r24
    1106:	49 c0       	rjmp	.+146    	; 0x119a <DIO_setPortDirection+0xfa>
		case DIO_PORTB:DDRB =0xff;break;
    1108:	e7 e3       	ldi	r30, 0x37	; 55
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	80 83       	st	Z, r24
    1110:	44 c0       	rjmp	.+136    	; 0x119a <DIO_setPortDirection+0xfa>
		case DIO_PORTC:DDRC =0xff;break;
    1112:	e4 e3       	ldi	r30, 0x34	; 52
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	80 83       	st	Z, r24
    111a:	3f c0       	rjmp	.+126    	; 0x119a <DIO_setPortDirection+0xfa>
		case DIO_PORTD:DDRD =0xff;break;
    111c:	e1 e3       	ldi	r30, 0x31	; 49
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	80 83       	st	Z, r24
    1124:	3a c0       	rjmp	.+116    	; 0x119a <DIO_setPortDirection+0xfa>
		default:local_errorStatus=1;break;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	37 c0       	rjmp	.+110    	; 0x119a <DIO_setPortDirection+0xfa>
		}
	}
	else if(copy_direction ==INPUT)
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	88 23       	and	r24, r24
    1130:	91 f5       	brne	.+100    	; 0x1196 <DIO_setPortDirection+0xf6>
	{
		switch(copy_port)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3d 83       	std	Y+5, r19	; 0x05
    113a:	2c 83       	std	Y+4, r18	; 0x04
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	c9 f0       	breq	.+50     	; 0x1178 <DIO_setPortDirection+0xd8>
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	3d 81       	ldd	r19, Y+5	; 0x05
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	2c f4       	brge	.+10     	; 0x115a <DIO_setPortDirection+0xba>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	61 f0       	breq	.+24     	; 0x1170 <DIO_setPortDirection+0xd0>
    1158:	1b c0       	rjmp	.+54     	; 0x1190 <DIO_setPortDirection+0xf0>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	71 f0       	breq	.+28     	; 0x1180 <DIO_setPortDirection+0xe0>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	69 f0       	breq	.+26     	; 0x1188 <DIO_setPortDirection+0xe8>
    116e:	10 c0       	rjmp	.+32     	; 0x1190 <DIO_setPortDirection+0xf0>
			{
			case DIO_PORTA:DDRA =0x00;break;
    1170:	ea e3       	ldi	r30, 0x3A	; 58
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	10 82       	st	Z, r1
    1176:	11 c0       	rjmp	.+34     	; 0x119a <DIO_setPortDirection+0xfa>
			case DIO_PORTB:DDRB =0x00;break;
    1178:	e7 e3       	ldi	r30, 0x37	; 55
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	10 82       	st	Z, r1
    117e:	0d c0       	rjmp	.+26     	; 0x119a <DIO_setPortDirection+0xfa>
			case DIO_PORTC:DDRC =0x00;break;
    1180:	e4 e3       	ldi	r30, 0x34	; 52
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	10 82       	st	Z, r1
    1186:	09 c0       	rjmp	.+18     	; 0x119a <DIO_setPortDirection+0xfa>
			case DIO_PORTD:DDRD =0x00;break;
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	10 82       	st	Z, r1
    118e:	05 c0       	rjmp	.+10     	; 0x119a <DIO_setPortDirection+0xfa>
			default:local_errorStatus=1;break;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_setPortDirection+0xfa>
			}
	}
	else
	{
		local_errorStatus=1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorStatus;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
}
    119c:	27 96       	adiw	r28, 0x07	; 7
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_uint8_setPortValue>:
/*This Function Set PORT value to HIGH or LOW*/
uint8 DIO_uint8_setPortValue(uint8 copy_port,uint8 copy_val)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	27 97       	sbiw	r28, 0x07	; 7
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	8a 83       	std	Y+2, r24	; 0x02
    11c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=0;
    11c6:	19 82       	std	Y+1, r1	; 0x01
		if(copy_val== HIGH)
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	b1 f5       	brne	.+108    	; 0x123a <DIO_uint8_setPortValue+0x8c>
		{
			switch(copy_port)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3f 83       	std	Y+7, r19	; 0x07
    11d6:	2e 83       	std	Y+6, r18	; 0x06
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06
    11da:	9f 81       	ldd	r25, Y+7	; 0x07
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	d1 f0       	breq	.+52     	; 0x1216 <DIO_uint8_setPortValue+0x68>
    11e2:	2e 81       	ldd	r18, Y+6	; 0x06
    11e4:	3f 81       	ldd	r19, Y+7	; 0x07
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <DIO_uint8_setPortValue+0x48>
    11ec:	8e 81       	ldd	r24, Y+6	; 0x06
    11ee:	9f 81       	ldd	r25, Y+7	; 0x07
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	61 f0       	breq	.+24     	; 0x120c <DIO_uint8_setPortValue+0x5e>
    11f4:	1f c0       	rjmp	.+62     	; 0x1234 <DIO_uint8_setPortValue+0x86>
    11f6:	2e 81       	ldd	r18, Y+6	; 0x06
    11f8:	3f 81       	ldd	r19, Y+7	; 0x07
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	81 f0       	breq	.+32     	; 0x1220 <DIO_uint8_setPortValue+0x72>
    1200:	8e 81       	ldd	r24, Y+6	; 0x06
    1202:	9f 81       	ldd	r25, Y+7	; 0x07
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	81 f0       	breq	.+32     	; 0x122a <DIO_uint8_setPortValue+0x7c>
    120a:	14 c0       	rjmp	.+40     	; 0x1234 <DIO_uint8_setPortValue+0x86>
			{
			case DIO_PORTA:PORTA =0xff;break;
    120c:	eb e3       	ldi	r30, 0x3B	; 59
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	80 83       	st	Z, r24
    1214:	49 c0       	rjmp	.+146    	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
			case DIO_PORTB:PORTB =0xff;break;
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	80 83       	st	Z, r24
    121e:	44 c0       	rjmp	.+136    	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
			case DIO_PORTC:PORTC =0xff;break;
    1220:	e5 e3       	ldi	r30, 0x35	; 53
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	80 83       	st	Z, r24
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
			case DIO_PORTD:PORTD =0xff;break;
    122a:	e2 e3       	ldi	r30, 0x32	; 50
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	80 83       	st	Z, r24
    1232:	3a c0       	rjmp	.+116    	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
			default:local_errorStatus=1;break;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	37 c0       	rjmp	.+110    	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
			}
		}
		else if(copy_val == LOW)
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 23       	and	r24, r24
    123e:	91 f5       	brne	.+100    	; 0x12a4 <DIO_uint8_setPortValue+0xf6>
		{
			switch(copy_port)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	c9 f0       	breq	.+50     	; 0x1286 <DIO_uint8_setPortValue+0xd8>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <DIO_uint8_setPortValue+0xba>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 f0       	breq	.+24     	; 0x127e <DIO_uint8_setPortValue+0xd0>
    1266:	1b c0       	rjmp	.+54     	; 0x129e <DIO_uint8_setPortValue+0xf0>
    1268:	2c 81       	ldd	r18, Y+4	; 0x04
    126a:	3d 81       	ldd	r19, Y+5	; 0x05
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	71 f0       	breq	.+28     	; 0x128e <DIO_uint8_setPortValue+0xe0>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	69 f0       	breq	.+26     	; 0x1296 <DIO_uint8_setPortValue+0xe8>
    127c:	10 c0       	rjmp	.+32     	; 0x129e <DIO_uint8_setPortValue+0xf0>
				{
				case DIO_PORTA:PORTA =0x00;break;
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	10 82       	st	Z, r1
    1284:	11 c0       	rjmp	.+34     	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
				case DIO_PORTB:PORTB =0x00;break;
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	10 82       	st	Z, r1
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
				case DIO_PORTC:PORTC =0x00;break;
    128e:	e5 e3       	ldi	r30, 0x35	; 53
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	10 82       	st	Z, r1
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
				case DIO_PORTD:PORTD =0x00;break;
    1296:	e2 e3       	ldi	r30, 0x32	; 50
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	10 82       	st	Z, r1
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
				default:local_errorStatus=1;break;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_uint8_setPortValue+0xfa>
				}
		}
		else
		{
			local_errorStatus=1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	89 83       	std	Y+1, r24	; 0x01
		}
		return local_errorStatus;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	27 96       	adiw	r28, 0x07	; 7
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <DIO_uint8_getPinValue>:

/*This function is to read from the PIN register is it HIGH or LOW USED WITH INPUTS*/
uint8 DIO_uint8_getPinValue(uint8 copy_port,uint8 copy_pin,uint8 *copy_pinValue)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	27 97       	sbiw	r28, 0x07	; 7
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
    12d4:	5d 83       	std	Y+5, r21	; 0x05
    12d6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
    12d8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pin <= PIN7)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <DIO_uint8_getPinValue+0x26>
    12e0:	74 c0       	rjmp	.+232    	; 0x13ca <DIO_uint8_getPinValue+0x10e>
	{
		switch(copy_port)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3f 83       	std	Y+7, r19	; 0x07
    12ea:	2e 83       	std	Y+6, r18	; 0x06
    12ec:	4e 81       	ldd	r20, Y+6	; 0x06
    12ee:	5f 81       	ldd	r21, Y+7	; 0x07
    12f0:	41 30       	cpi	r20, 0x01	; 1
    12f2:	51 05       	cpc	r21, r1
    12f4:	59 f1       	breq	.+86     	; 0x134c <DIO_uint8_getPinValue+0x90>
    12f6:	8e 81       	ldd	r24, Y+6	; 0x06
    12f8:	9f 81       	ldd	r25, Y+7	; 0x07
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	91 05       	cpc	r25, r1
    12fe:	34 f4       	brge	.+12     	; 0x130c <DIO_uint8_getPinValue+0x50>
    1300:	2e 81       	ldd	r18, Y+6	; 0x06
    1302:	3f 81       	ldd	r19, Y+7	; 0x07
    1304:	21 15       	cp	r18, r1
    1306:	31 05       	cpc	r19, r1
    1308:	69 f0       	breq	.+26     	; 0x1324 <DIO_uint8_getPinValue+0x68>
    130a:	5c c0       	rjmp	.+184    	; 0x13c4 <DIO_uint8_getPinValue+0x108>
    130c:	4e 81       	ldd	r20, Y+6	; 0x06
    130e:	5f 81       	ldd	r21, Y+7	; 0x07
    1310:	42 30       	cpi	r20, 0x02	; 2
    1312:	51 05       	cpc	r21, r1
    1314:	79 f1       	breq	.+94     	; 0x1374 <DIO_uint8_getPinValue+0xb8>
    1316:	8e 81       	ldd	r24, Y+6	; 0x06
    1318:	9f 81       	ldd	r25, Y+7	; 0x07
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	09 f4       	brne	.+2      	; 0x1322 <DIO_uint8_getPinValue+0x66>
    1320:	3d c0       	rjmp	.+122    	; 0x139c <DIO_uint8_getPinValue+0xe0>
    1322:	50 c0       	rjmp	.+160    	; 0x13c4 <DIO_uint8_getPinValue+0x108>
				 {
							case DIO_PORTA:*copy_pinValue=GET_BIT(PINA ,copy_pin);break;
    1324:	e9 e3       	ldi	r30, 0x39	; 57
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_uint8_getPinValue+0x80>
    1338:	55 95       	asr	r21
    133a:	47 95       	ror	r20
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_uint8_getPinValue+0x7c>
    1340:	ca 01       	movw	r24, r20
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	ec 81       	ldd	r30, Y+4	; 0x04
    1346:	fd 81       	ldd	r31, Y+5	; 0x05
    1348:	80 83       	st	Z, r24
    134a:	41 c0       	rjmp	.+130    	; 0x13ce <DIO_uint8_getPinValue+0x112>
							case DIO_PORTB:*copy_pinValue=GET_BIT(PINB ,copy_pin);break;
    134c:	e6 e3       	ldi	r30, 0x36	; 54
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_uint8_getPinValue+0xa8>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_uint8_getPinValue+0xa4>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	ec 81       	ldd	r30, Y+4	; 0x04
    136e:	fd 81       	ldd	r31, Y+5	; 0x05
    1370:	80 83       	st	Z, r24
    1372:	2d c0       	rjmp	.+90     	; 0x13ce <DIO_uint8_getPinValue+0x112>
							case DIO_PORTC:*copy_pinValue=GET_BIT(PINC ,copy_pin);break;
    1374:	e3 e3       	ldi	r30, 0x33	; 51
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_uint8_getPinValue+0xd0>
    1388:	55 95       	asr	r21
    138a:	47 95       	ror	r20
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_uint8_getPinValue+0xcc>
    1390:	ca 01       	movw	r24, r20
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	ec 81       	ldd	r30, Y+4	; 0x04
    1396:	fd 81       	ldd	r31, Y+5	; 0x05
    1398:	80 83       	st	Z, r24
    139a:	19 c0       	rjmp	.+50     	; 0x13ce <DIO_uint8_getPinValue+0x112>
							case DIO_PORTD:*copy_pinValue=GET_BIT(PIND ,copy_pin);break;
    139c:	e0 e3       	ldi	r30, 0x30	; 48
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_uint8_getPinValue+0xf8>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_uint8_getPinValue+0xf4>
    13b8:	ca 01       	movw	r24, r20
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	ec 81       	ldd	r30, Y+4	; 0x04
    13be:	fd 81       	ldd	r31, Y+5	; 0x05
    13c0:	80 83       	st	Z, r24
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <DIO_uint8_getPinValue+0x112>
							default:local_errorStatus =1;break;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_uint8_getPinValue+0x112>
				 }
	}
	else
	{
		local_errorStatus =1;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
	}




  return local_errorStatus;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d0:	27 96       	adiw	r28, 0x07	; 7
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <DIO_TogPinValue>:

uint8 DIO_TogPinValue(uint8 copy_port,uint8 copy_pin,uint8 copy_val)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <DIO_TogPinValue+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <DIO_TogPinValue+0x8>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <DIO_TogPinValue+0xa>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	6b 83       	std	Y+3, r22	; 0x03
    13f4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
    13f6:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pin <= PIN7)
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 30       	cpi	r24, 0x08	; 8
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <DIO_TogPinValue+0x1e>
    13fe:	72 c0       	rjmp	.+228    	; 0x14e4 <DIO_TogPinValue+0x102>
	{
		switch(copy_port)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3e 83       	std	Y+6, r19	; 0x06
    1408:	2d 83       	std	Y+5, r18	; 0x05
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	49 f1       	breq	.+82     	; 0x1466 <DIO_TogPinValue+0x84>
    1414:	2d 81       	ldd	r18, Y+5	; 0x05
    1416:	3e 81       	ldd	r19, Y+6	; 0x06
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <DIO_TogPinValue+0x46>
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <DIO_TogPinValue+0x5c>
    1426:	5b c0       	rjmp	.+182    	; 0x14de <DIO_TogPinValue+0xfc>
    1428:	2d 81       	ldd	r18, Y+5	; 0x05
    142a:	3e 81       	ldd	r19, Y+6	; 0x06
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	71 f1       	breq	.+92     	; 0x148e <DIO_TogPinValue+0xac>
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	e9 f1       	breq	.+122    	; 0x14b6 <DIO_TogPinValue+0xd4>
    143c:	50 c0       	rjmp	.+160    	; 0x14de <DIO_TogPinValue+0xfc>
				 {
							case DIO_PORTA:TOG_BIT(PINA ,copy_pin);break;
    143e:	a9 e3       	ldi	r26, 0x39	; 57
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e9 e3       	ldi	r30, 0x39	; 57
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_TogPinValue+0x7a>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_TogPinValue+0x76>
    1460:	84 27       	eor	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	41 c0       	rjmp	.+130    	; 0x14e8 <DIO_TogPinValue+0x106>
							case DIO_PORTB:TOG_BIT(PINB ,copy_pin);break;
    1466:	a6 e3       	ldi	r26, 0x36	; 54
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e6 e3       	ldi	r30, 0x36	; 54
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_TogPinValue+0xa2>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_TogPinValue+0x9e>
    1488:	84 27       	eor	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	2d c0       	rjmp	.+90     	; 0x14e8 <DIO_TogPinValue+0x106>
							case DIO_PORTC:TOG_BIT(PINC ,copy_pin);break;
    148e:	a3 e3       	ldi	r26, 0x33	; 51
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e3 e3       	ldi	r30, 0x33	; 51
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_TogPinValue+0xca>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_TogPinValue+0xc6>
    14b0:	84 27       	eor	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	19 c0       	rjmp	.+50     	; 0x14e8 <DIO_TogPinValue+0x106>
							case DIO_PORTD:TOG_BIT(PIND ,copy_pin);break;
    14b6:	a0 e3       	ldi	r26, 0x30	; 48
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e0 e3       	ldi	r30, 0x30	; 48
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_TogPinValue+0xf2>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_TogPinValue+0xee>
    14d8:	84 27       	eor	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <DIO_TogPinValue+0x106>
							default:local_errorStatus =1;break;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_TogPinValue+0x106>
				 }
	}
	else
	{
		local_errorStatus =1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorStatus;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	26 96       	adiw	r28, 0x06	; 6
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <DIO_setInterrnalalPullup>:




void DIO_setInterrnalalPullup(uint8 copy_Port ,uint8 copy_pin)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <DIO_setInterrnalalPullup+0x6>
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	6a 83       	std	Y+2, r22	; 0x02
  /*set pin as input*/
	DIO_setPinDirection(copy_Port ,copy_pin ,INPUT);
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	6a 81       	ldd	r22, Y+2	; 0x02
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>
  /*output high*/
	DIO_setPinValue(copy_Port, copy_pin,HIGH);
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	6a 81       	ldd	r22, Y+2	; 0x02
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <DIO_setHighFourPins>:


uint8 DIO_setHighFourPins(uint8 copy_Port ,uint8 copy_val)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <DIO_setHighFourPins+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <DIO_setHighFourPins+0x8>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	8a 83       	std	Y+2, r24	; 0x02
    1538:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=0;
    153a:	19 82       	std	Y+1, r1	; 0x01
			if(copy_Port <= DIO_PORTD)
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	84 30       	cpi	r24, 0x04	; 4
    1540:	08 f0       	brcs	.+2      	; 0x1544 <DIO_setHighFourPins+0x1c>
    1542:	66 c0       	rjmp	.+204    	; 0x1610 <DIO_setHighFourPins+0xe8>
			{
		     copy_val=(copy_val<<4);
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	82 95       	swap	r24
    1548:	80 7f       	andi	r24, 0xF0	; 240
    154a:	8b 83       	std	Y+3, r24	; 0x03
		     switch(copy_Port)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	29 f1       	breq	.+74     	; 0x15aa <DIO_setHighFourPins+0x82>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <DIO_setHighFourPins+0x4c>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <DIO_setHighFourPins+0x62>
    1572:	4b c0       	rjmp	.+150    	; 0x160a <DIO_setHighFourPins+0xe2>
    1574:	2c 81       	ldd	r18, Y+4	; 0x04
    1576:	3d 81       	ldd	r19, Y+5	; 0x05
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	31 f1       	breq	.+76     	; 0x15ca <DIO_setHighFourPins+0xa2>
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	89 f1       	breq	.+98     	; 0x15ea <DIO_setHighFourPins+0xc2>
    1588:	40 c0       	rjmp	.+128    	; 0x160a <DIO_setHighFourPins+0xe2>
		     				 {
		     							case DIO_PORTA:PORTA&=0x0f; PORTA|=copy_val;break;
    158a:	ab e3       	ldi	r26, 0x3B	; 59
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8f 70       	andi	r24, 0x0F	; 15
    1596:	8c 93       	st	X, r24
    1598:	ab e3       	ldi	r26, 0x3B	; 59
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	90 81       	ld	r25, Z
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	89 2b       	or	r24, r25
    15a6:	8c 93       	st	X, r24
    15a8:	35 c0       	rjmp	.+106    	; 0x1614 <DIO_setHighFourPins+0xec>
		     							case DIO_PORTB:PORTB&=0x0f; PORTB|=copy_val;break;
    15aa:	a8 e3       	ldi	r26, 0x38	; 56
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e8 e3       	ldi	r30, 0x38	; 56
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	8c 93       	st	X, r24
    15b8:	a8 e3       	ldi	r26, 0x38	; 56
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	90 81       	ld	r25, Z
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	89 2b       	or	r24, r25
    15c6:	8c 93       	st	X, r24
    15c8:	25 c0       	rjmp	.+74     	; 0x1614 <DIO_setHighFourPins+0xec>
		     							case DIO_PORTC:PORTC&=0x0f; PORTC|=copy_val;break;
    15ca:	a5 e3       	ldi	r26, 0x35	; 53
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e3       	ldi	r30, 0x35	; 53
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8f 70       	andi	r24, 0x0F	; 15
    15d6:	8c 93       	st	X, r24
    15d8:	a5 e3       	ldi	r26, 0x35	; 53
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e5 e3       	ldi	r30, 0x35	; 53
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	90 81       	ld	r25, Z
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	89 2b       	or	r24, r25
    15e6:	8c 93       	st	X, r24
    15e8:	15 c0       	rjmp	.+42     	; 0x1614 <DIO_setHighFourPins+0xec>
		     							case DIO_PORTD:PORTD&=0x0f; PORTD|=copy_val;break;
    15ea:	a2 e3       	ldi	r26, 0x32	; 50
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e2 e3       	ldi	r30, 0x32	; 50
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8f 70       	andi	r24, 0x0F	; 15
    15f6:	8c 93       	st	X, r24
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	90 81       	ld	r25, Z
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	89 2b       	or	r24, r25
    1606:	8c 93       	st	X, r24
    1608:	05 c0       	rjmp	.+10     	; 0x1614 <DIO_setHighFourPins+0xec>
		     							default:local_errorStatus =1;break;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_setHighFourPins+0xec>
		     				 }

			}
			else
			{
				local_errorStatus =1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01
			}

	return local_errorStatus;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <getPressed>:
#include "PORT_interface.h"
#include "KYP_interface.h"
#include "KYP_cfg.h"

uint8 getPressed(void)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	a2 97       	sbiw	r28, 0x22	; 34
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
	uint8 COL_ARR[COL_NUM]=COL_PINS;
    163a:	84 e0       	ldi	r24, 0x04	; 4
    163c:	8c 83       	std	Y+4, r24	; 0x04
    163e:	85 e0       	ldi	r24, 0x05	; 5
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	86 e0       	ldi	r24, 0x06	; 6
    1644:	8e 83       	std	Y+6, r24	; 0x06
    1646:	87 e0       	ldi	r24, 0x07	; 7
    1648:	8f 83       	std	Y+7, r24	; 0x07
	uint8 ROW_ARR[ROW_NUM]=ROW_PINS;
    164a:	18 86       	std	Y+8, r1	; 0x08
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 87       	std	Y+9, r24	; 0x09
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	8a 87       	std	Y+10, r24	; 0x0a
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 KEYPAD_KEYS[ROW_NUM][COL_NUM]=KEYS_array;
    1658:	ce 01       	movw	r24, r28
    165a:	0c 96       	adiw	r24, 0x0c	; 12
    165c:	9f 8f       	std	Y+31, r25	; 0x1f
    165e:	8e 8f       	std	Y+30, r24	; 0x1e
    1660:	ed e0       	ldi	r30, 0x0D	; 13
    1662:	f1 e0       	ldi	r31, 0x01	; 1
    1664:	f9 a3       	std	Y+33, r31	; 0x21
    1666:	e8 a3       	std	Y+32, r30	; 0x20
    1668:	f0 e1       	ldi	r31, 0x10	; 16
    166a:	fa a3       	std	Y+34, r31	; 0x22
    166c:	e8 a1       	ldd	r30, Y+32	; 0x20
    166e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1670:	00 80       	ld	r0, Z
    1672:	88 a1       	ldd	r24, Y+32	; 0x20
    1674:	99 a1       	ldd	r25, Y+33	; 0x21
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	99 a3       	std	Y+33, r25	; 0x21
    167a:	88 a3       	std	Y+32, r24	; 0x20
    167c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    167e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1680:	00 82       	st	Z, r0
    1682:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1684:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	9f 8f       	std	Y+31, r25	; 0x1f
    168a:	8e 8f       	std	Y+30, r24	; 0x1e
    168c:	9a a1       	ldd	r25, Y+34	; 0x22
    168e:	91 50       	subi	r25, 0x01	; 1
    1690:	9a a3       	std	Y+34, r25	; 0x22
    1692:	ea a1       	ldd	r30, Y+34	; 0x22
    1694:	ee 23       	and	r30, r30
    1696:	51 f7       	brne	.-44     	; 0x166c <getPressed+0x46>
	uint8 pressedKey = 0xff;
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	8c 8f       	std	Y+28, r24	; 0x1c
	uint8 button = 0xff;
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	8b 83       	std	Y+3, r24	; 0x03


	for(uint8 COL_index = 0;COL_index < COL_NUM ; COL_index++)
    16a0:	1a 82       	std	Y+2, r1	; 0x02
    16a2:	68 c0       	rjmp	.+208    	; 0x1774 <getPressed+0x14e>
	{
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],LOW);
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	ce 01       	movw	r24, r28
    16ac:	04 96       	adiw	r24, 0x04	; 4
    16ae:	fc 01       	movw	r30, r24
    16b0:	e2 0f       	add	r30, r18
    16b2:	f3 1f       	adc	r31, r19
    16b4:	90 81       	ld	r25, Z
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	69 2f       	mov	r22, r25
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
		for(uint8 ROW_index = 0 ; ROW_index < ROW_NUM ; ROW_index++)
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	43 c0       	rjmp	.+134    	; 0x174a <getPressed+0x124>
		{
			DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	ce 01       	movw	r24, r28
    16cc:	08 96       	adiw	r24, 0x08	; 8
    16ce:	fc 01       	movw	r30, r24
    16d0:	e2 0f       	add	r30, r18
    16d2:	f3 1f       	adc	r31, r19
    16d4:	90 81       	ld	r25, Z
    16d6:	9e 01       	movw	r18, r28
    16d8:	24 5e       	subi	r18, 0xE4	; 228
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	69 2f       	mov	r22, r25
    16e0:	a9 01       	movw	r20, r18
    16e2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_uint8_getPinValue>
			if(pressedKey == LOW)
    16e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16e8:	88 23       	and	r24, r24
    16ea:	61 f5       	brne	.+88     	; 0x1744 <getPressed+0x11e>
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <getPressed+0xea>
			{
				while(pressedKey == LOW)
				{
					DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	ce 01       	movw	r24, r28
    16f6:	08 96       	adiw	r24, 0x08	; 8
    16f8:	fc 01       	movw	r30, r24
    16fa:	e2 0f       	add	r30, r18
    16fc:	f3 1f       	adc	r31, r19
    16fe:	90 81       	ld	r25, Z
    1700:	9e 01       	movw	r18, r28
    1702:	24 5e       	subi	r18, 0xE4	; 228
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	69 2f       	mov	r22, r25
    170a:	a9 01       	movw	r20, r18
    170c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_uint8_getPinValue>
		for(uint8 ROW_index = 0 ; ROW_index < ROW_NUM ; ROW_index++)
		{
			DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
			if(pressedKey == LOW)
			{
				while(pressedKey == LOW)
    1710:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1712:	88 23       	and	r24, r24
    1714:	61 f3       	breq	.-40     	; 0x16ee <getPressed+0xc8>
				{
					DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
				}
				button=KEYPAD_KEYS[ROW_index][COL_index];
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	48 2f       	mov	r20, r24
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	22 0f       	add	r18, r18
    1728:	33 1f       	adc	r19, r19
    172a:	ce 01       	movw	r24, r28
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	82 0f       	add	r24, r18
    1730:	93 1f       	adc	r25, r19
    1732:	84 0f       	add	r24, r20
    1734:	95 1f       	adc	r25, r21
    1736:	fc 01       	movw	r30, r24
    1738:	3b 96       	adiw	r30, 0x0b	; 11
    173a:	80 81       	ld	r24, Z
    173c:	8b 83       	std	Y+3, r24	; 0x03
				return button;
    173e:	fb 81       	ldd	r31, Y+3	; 0x03
    1740:	fd 8f       	std	Y+29, r31	; 0x1d
    1742:	1e c0       	rjmp	.+60     	; 0x1780 <getPressed+0x15a>


	for(uint8 COL_index = 0;COL_index < COL_NUM ; COL_index++)
	{
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],LOW);
		for(uint8 ROW_index = 0 ; ROW_index < ROW_NUM ; ROW_index++)
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	08 f4       	brcc	.+2      	; 0x1752 <getPressed+0x12c>
    1750:	b9 cf       	rjmp	.-142    	; 0x16c4 <getPressed+0x9e>
				button=KEYPAD_KEYS[ROW_index][COL_index];
				return button;

			}
		}
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],HIGH);
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	ce 01       	movw	r24, r28
    175a:	04 96       	adiw	r24, 0x04	; 4
    175c:	fc 01       	movw	r30, r24
    175e:	e2 0f       	add	r30, r18
    1760:	f3 1f       	adc	r31, r19
    1762:	90 81       	ld	r25, Z
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	69 2f       	mov	r22, r25
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
	uint8 KEYPAD_KEYS[ROW_NUM][COL_NUM]=KEYS_array;
	uint8 pressedKey = 0xff;
	uint8 button = 0xff;


	for(uint8 COL_index = 0;COL_index < COL_NUM ; COL_index++)
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	08 f4       	brcc	.+2      	; 0x177c <getPressed+0x156>
    177a:	94 cf       	rjmp	.-216    	; 0x16a4 <getPressed+0x7e>
			}
		}
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],HIGH);

	}
	return button;
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	8d 8f       	std	Y+29, r24	; 0x1d
    1780:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1782:	a2 96       	adiw	r28, 0x22	; 34
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <LCD_voidinit>:
#include "LCD_interface.h"



void LCD_voidinit                  (void)
{
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	c4 55       	subi	r28, 0x54	; 84
    17a2:	d0 40       	sbci	r29, 0x00	; 0
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	fe 01       	movw	r30, r28
    17b0:	ef 5a       	subi	r30, 0xAF	; 175
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a8 e4       	ldi	r26, 0x48	; 72
    17ba:	b2 e4       	ldi	r27, 0x42	; 66
    17bc:	80 83       	st	Z, r24
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	a2 83       	std	Z+2, r26	; 0x02
    17c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	8e 01       	movw	r16, r28
    17c6:	03 5b       	subi	r16, 0xB3	; 179
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	fe 01       	movw	r30, r28
    17cc:	ef 5a       	subi	r30, 0xAF	; 175
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	4a e7       	ldi	r20, 0x7A	; 122
    17de:	55 e4       	ldi	r21, 0x45	; 69
    17e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	f8 01       	movw	r30, r16
    17ea:	80 83       	st	Z, r24
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	a2 83       	std	Z+2, r26	; 0x02
    17f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f2:	fe 01       	movw	r30, r28
    17f4:	e3 5b       	subi	r30, 0xB3	; 179
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    180c:	88 23       	and	r24, r24
    180e:	44 f4       	brge	.+16     	; 0x1820 <LCD_voidinit+0x8c>
		__ticks = 1;
    1810:	fe 01       	movw	r30, r28
    1812:	e5 5b       	subi	r30, 0xB5	; 181
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
    181e:	64 c0       	rjmp	.+200    	; 0x18e8 <LCD_voidinit+0x154>
	else if (__tmp > 65535)
    1820:	fe 01       	movw	r30, r28
    1822:	e3 5b       	subi	r30, 0xB3	; 179
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	0c f0       	brlt	.+2      	; 0x1840 <LCD_voidinit+0xac>
    183e:	43 c0       	rjmp	.+134    	; 0x18c6 <LCD_voidinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	fe 01       	movw	r30, r28
    1842:	ef 5a       	subi	r30, 0xAF	; 175
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	8e 01       	movw	r16, r28
    1860:	05 5b       	subi	r16, 0xB5	; 181
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	bc 01       	movw	r22, r24
    1866:	cd 01       	movw	r24, r26
    1868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	f8 01       	movw	r30, r16
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	80 83       	st	Z, r24
    1876:	1f c0       	rjmp	.+62     	; 0x18b6 <LCD_voidinit+0x122>
    1878:	fe 01       	movw	r30, r28
    187a:	e7 5b       	subi	r30, 0xB7	; 183
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 e9       	ldi	r24, 0x90	; 144
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1886:	fe 01       	movw	r30, r28
    1888:	e7 5b       	subi	r30, 0xB7	; 183
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 81       	ld	r24, Z
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <LCD_voidinit+0xfc>
    1894:	fe 01       	movw	r30, r28
    1896:	e7 5b       	subi	r30, 0xB7	; 183
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	de 01       	movw	r26, r28
    18a0:	a5 5b       	subi	r26, 0xB5	; 181
    18a2:	bf 4f       	sbci	r27, 0xFF	; 255
    18a4:	fe 01       	movw	r30, r28
    18a6:	e5 5b       	subi	r30, 0xB5	; 181
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	11 96       	adiw	r26, 0x01	; 1
    18b2:	9c 93       	st	X, r25
    18b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b6:	fe 01       	movw	r30, r28
    18b8:	e5 5b       	subi	r30, 0xB5	; 181
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	d1 f6       	brne	.-76     	; 0x1878 <LCD_voidinit+0xe4>
    18c4:	27 c0       	rjmp	.+78     	; 0x1914 <LCD_voidinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c6:	8e 01       	movw	r16, r28
    18c8:	05 5b       	subi	r16, 0xB5	; 181
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	fe 01       	movw	r30, r28
    18ce:	e3 5b       	subi	r30, 0xB3	; 179
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	f8 01       	movw	r30, r16
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	de 01       	movw	r26, r28
    18ea:	a9 5b       	subi	r26, 0xB9	; 185
    18ec:	bf 4f       	sbci	r27, 0xFF	; 255
    18ee:	fe 01       	movw	r30, r28
    18f0:	e5 5b       	subi	r30, 0xB5	; 181
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	8d 93       	st	X+, r24
    18fa:	9c 93       	st	X, r25
    18fc:	fe 01       	movw	r30, r28
    18fe:	e9 5b       	subi	r30, 0xB9	; 185
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_voidinit+0x172>
    190a:	fe 01       	movw	r30, r28
    190c:	e9 5b       	subi	r30, 0xB9	; 185
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
#if  LCD_Mode == 4

	_delay_ms(50);
	DIO_setPinDirection(LCD_DATA_PORT ,PIN4 ,OUTPUT);
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	64 e0       	ldi	r22, 0x04	; 4
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT ,PIN5 ,OUTPUT);
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	65 e0       	ldi	r22, 0x05	; 5
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT ,PIN6 ,OUTPUT);
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	66 e0       	ldi	r22, 0x06	; 6
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT ,PIN7 ,OUTPUT);
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	67 e0       	ldi	r22, 0x07	; 7
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>

	DIO_setPinDirection(LCD_CONTROL_PORT ,LCD_RS ,OUTPUT);
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CONTROL_PORT ,LCD_RW ,OUTPUT);
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CONTROL_PORT ,LCD_EN ,OUTPUT);
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	63 e0       	ldi	r22, 0x03	; 3
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>

	LCD_sendCommand(SET_HOME);                     //Set Home
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <LCD_sendCommand>
    1960:	fe 01       	movw	r30, r28
    1962:	ed 5b       	subi	r30, 0xBD	; 189
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 ef       	ldi	r26, 0xF0	; 240
    196c:	b1 e4       	ldi	r27, 0x41	; 65
    196e:	80 83       	st	Z, r24
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	a2 83       	std	Z+2, r26	; 0x02
    1974:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	8e 01       	movw	r16, r28
    1978:	01 5c       	subi	r16, 0xC1	; 193
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	fe 01       	movw	r30, r28
    197e:	ed 5b       	subi	r30, 0xBD	; 189
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4a e7       	ldi	r20, 0x7A	; 122
    1990:	55 e4       	ldi	r21, 0x45	; 69
    1992:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	80 83       	st	Z, r24
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	a2 83       	std	Z+2, r26	; 0x02
    19a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a4:	fe 01       	movw	r30, r28
    19a6:	ff 96       	adiw	r30, 0x3f	; 63
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_voidinit+0x236>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e af       	std	Y+62, r25	; 0x3e
    19c6:	8d af       	std	Y+61, r24	; 0x3d
    19c8:	46 c0       	rjmp	.+140    	; 0x1a56 <LCD_voidinit+0x2c2>
	else if (__tmp > 65535)
    19ca:	fe 01       	movw	r30, r28
    19cc:	ff 96       	adiw	r30, 0x3f	; 63
    19ce:	60 81       	ld	r22, Z
    19d0:	71 81       	ldd	r23, Z+1	; 0x01
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	64 f5       	brge	.+88     	; 0x1a3e <LCD_voidinit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	fe 01       	movw	r30, r28
    19e8:	ed 5b       	subi	r30, 0xBD	; 189
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e af       	std	Y+62, r25	; 0x3e
    1a12:	8d af       	std	Y+61, r24	; 0x3d
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_voidinit+0x2a0>
    1a16:	80 e9       	ldi	r24, 0x90	; 144
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	9c af       	std	Y+60, r25	; 0x3c
    1a1c:	8b af       	std	Y+59, r24	; 0x3b
    1a1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a20:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_voidinit+0x28e>
    1a26:	9c af       	std	Y+60, r25	; 0x3c
    1a28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e af       	std	Y+62, r25	; 0x3e
    1a32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <LCD_voidinit+0x282>
    1a3c:	16 c0       	rjmp	.+44     	; 0x1a6a <LCD_voidinit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ff 96       	adiw	r30, 0x3f	; 63
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9e af       	std	Y+62, r25	; 0x3e
    1a54:	8d af       	std	Y+61, r24	; 0x3d
    1a56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5a:	9a af       	std	Y+58, r25	; 0x3a
    1a5c:	89 af       	std	Y+57, r24	; 0x39
    1a5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_voidinit+0x2ce>
    1a66:	9a af       	std	Y+58, r25	; 0x3a
    1a68:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	LCD_sendCommand(Four_bits);                    //Function set
    1a6a:	88 e2       	ldi	r24, 0x28	; 40
    1a6c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <LCD_sendCommand>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a0 e8       	ldi	r26, 0x80	; 128
    1a76:	bf e3       	ldi	r27, 0x3F	; 63
    1a78:	8d ab       	std	Y+53, r24	; 0x35
    1a7a:	9e ab       	std	Y+54, r25	; 0x36
    1a7c:	af ab       	std	Y+55, r26	; 0x37
    1a7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a80:	6d a9       	ldd	r22, Y+53	; 0x35
    1a82:	7e a9       	ldd	r23, Y+54	; 0x36
    1a84:	8f a9       	ldd	r24, Y+55	; 0x37
    1a86:	98 ad       	ldd	r25, Y+56	; 0x38
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a e7       	ldi	r20, 0x7A	; 122
    1a8e:	55 e4       	ldi	r21, 0x45	; 69
    1a90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	89 ab       	std	Y+49, r24	; 0x31
    1a9a:	9a ab       	std	Y+50, r25	; 0x32
    1a9c:	ab ab       	std	Y+51, r26	; 0x33
    1a9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <LCD_voidinit+0x32e>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	98 ab       	std	Y+48, r25	; 0x30
    1abe:	8f a7       	std	Y+47, r24	; 0x2f
    1ac0:	3f c0       	rjmp	.+126    	; 0x1b40 <LCD_voidinit+0x3ac>
	else if (__tmp > 65535)
    1ac2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ad6:	18 16       	cp	r1, r24
    1ad8:	4c f5       	brge	.+82     	; 0x1b2c <LCD_voidinit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	6d a9       	ldd	r22, Y+53	; 0x35
    1adc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ade:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	98 ab       	std	Y+48, r25	; 0x30
    1b00:	8f a7       	std	Y+47, r24	; 0x2f
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <LCD_voidinit+0x38e>
    1b04:	80 e9       	ldi	r24, 0x90	; 144
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	9e a7       	std	Y+46, r25	; 0x2e
    1b0a:	8d a7       	std	Y+45, r24	; 0x2d
    1b0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <LCD_voidinit+0x37c>
    1b14:	9e a7       	std	Y+46, r25	; 0x2e
    1b16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	98 ab       	std	Y+48, r25	; 0x30
    1b20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b24:	98 a9       	ldd	r25, Y+48	; 0x30
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <LCD_voidinit+0x370>
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <LCD_voidinit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b30:	8b a9       	ldd	r24, Y+51	; 0x33
    1b32:	9c a9       	ldd	r25, Y+52	; 0x34
    1b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b42:	98 a9       	ldd	r25, Y+48	; 0x30
    1b44:	9c a7       	std	Y+44, r25	; 0x2c
    1b46:	8b a7       	std	Y+43, r24	; 0x2b
    1b48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <LCD_voidinit+0x3b8>
    1b50:	9c a7       	std	Y+44, r25	; 0x2c
    1b52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);        //display ON
    1b54:	8c e0       	ldi	r24, 0x0C	; 12
    1b56:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <LCD_sendCommand>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e8       	ldi	r26, 0x80	; 128
    1b60:	bf e3       	ldi	r27, 0x3F	; 63
    1b62:	8f a3       	std	Y+39, r24	; 0x27
    1b64:	98 a7       	std	Y+40, r25	; 0x28
    1b66:	a9 a7       	std	Y+41, r26	; 0x29
    1b68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a e7       	ldi	r20, 0x7A	; 122
    1b78:	55 e4       	ldi	r21, 0x45	; 69
    1b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	8b a3       	std	Y+35, r24	; 0x23
    1b84:	9c a3       	std	Y+36, r25	; 0x24
    1b86:	ad a3       	std	Y+37, r26	; 0x25
    1b88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b90:	9e a1       	ldd	r25, Y+38	; 0x26
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <LCD_voidinit+0x418>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9a a3       	std	Y+34, r25	; 0x22
    1ba8:	89 a3       	std	Y+33, r24	; 0x21
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <LCD_voidinit+0x496>
	else if (__tmp > 65535)
    1bac:	6b a1       	ldd	r22, Y+35	; 0x23
    1bae:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	57 e4       	ldi	r21, 0x47	; 71
    1bbc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	4c f5       	brge	.+82     	; 0x1c16 <LCD_voidinit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e2       	ldi	r20, 0x20	; 32
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9a a3       	std	Y+34, r25	; 0x22
    1bea:	89 a3       	std	Y+33, r24	; 0x21
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_voidinit+0x478>
    1bee:	80 e9       	ldi	r24, 0x90	; 144
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	98 a3       	std	Y+32, r25	; 0x20
    1bf4:	8f 8f       	std	Y+31, r24	; 0x1f
    1bf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_voidinit+0x466>
    1bfe:	98 a3       	std	Y+32, r25	; 0x20
    1c00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	89 a1       	ldd	r24, Y+33	; 0x21
    1c04:	9a a1       	ldd	r25, Y+34	; 0x22
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9a a3       	std	Y+34, r25	; 0x22
    1c0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f7       	brne	.-38     	; 0x1bee <LCD_voidinit+0x45a>
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <LCD_voidinit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c16:	6b a1       	ldd	r22, Y+35	; 0x23
    1c18:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9a a3       	std	Y+34, r25	; 0x22
    1c28:	89 a3       	std	Y+33, r24	; 0x21
    1c2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c30:	8d 8f       	std	Y+29, r24	; 0x1d
    1c32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_voidinit+0x4a2>
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_sendCommand(DISPLAY_CLEAR);                //Display clear
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <LCD_sendCommand>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e2       	ldi	r26, 0x20	; 32
    1c4a:	b1 e4       	ldi	r27, 0x41	; 65
    1c4c:	89 8f       	std	Y+25, r24	; 0x19
    1c4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c50:	ab 8f       	std	Y+27, r26	; 0x1b
    1c52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	69 8d       	ldd	r22, Y+25	; 0x19
    1c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a e7       	ldi	r20, 0x7A	; 122
    1c62:	55 e4       	ldi	r21, 0x45	; 69
    1c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8d 8b       	std	Y+21, r24	; 0x15
    1c6e:	9e 8b       	std	Y+22, r25	; 0x16
    1c70:	af 8b       	std	Y+23, r26	; 0x17
    1c72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c74:	6d 89       	ldd	r22, Y+21	; 0x15
    1c76:	7e 89       	ldd	r23, Y+22	; 0x16
    1c78:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <LCD_voidinit+0x502>
		__ticks = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 8b       	std	Y+20, r25	; 0x14
    1c92:	8b 8b       	std	Y+19, r24	; 0x13
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <LCD_voidinit+0x580>
	else if (__tmp > 65535)
    1c96:	6d 89       	ldd	r22, Y+21	; 0x15
    1c98:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1caa:	18 16       	cp	r1, r24
    1cac:	4c f5       	brge	.+82     	; 0x1d00 <LCD_voidinit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9c 8b       	std	Y+20, r25	; 0x14
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <LCD_voidinit+0x562>
    1cd8:	80 e9       	ldi	r24, 0x90	; 144
    1cda:	91 e0       	ldi	r25, 0x01	; 1
    1cdc:	9a 8b       	std	Y+18, r25	; 0x12
    1cde:	89 8b       	std	Y+17, r24	; 0x11
    1ce0:	89 89       	ldd	r24, Y+17	; 0x11
    1ce2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_voidinit+0x550>
    1ce8:	9a 8b       	std	Y+18, r25	; 0x12
    1cea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f7       	brne	.-38     	; 0x1cd8 <LCD_voidinit+0x544>
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <LCD_voidinit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	8b 89       	ldd	r24, Y+19	; 0x13
    1d16:	9c 89       	ldd	r25, Y+20	; 0x14
    1d18:	98 8b       	std	Y+16, r25	; 0x10
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
    1d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1e:	98 89       	ldd	r25, Y+16	; 0x10
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_voidinit+0x58c>
    1d24:	98 8b       	std	Y+16, r25	; 0x10
    1d26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_sendCommand(ENTRY_MODE);                   //Entry Mode
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <LCD_sendCommand>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a0 e8       	ldi	r26, 0x80	; 128
    1d34:	bf e3       	ldi	r27, 0x3F	; 63
    1d36:	8b 87       	std	Y+11, r24	; 0x0b
    1d38:	9c 87       	std	Y+12, r25	; 0x0c
    1d3a:	ad 87       	std	Y+13, r26	; 0x0d
    1d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	4a e7       	ldi	r20, 0x7A	; 122
    1d4c:	55 e4       	ldi	r21, 0x45	; 69
    1d4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8f 83       	std	Y+7, r24	; 0x07
    1d58:	98 87       	std	Y+8, r25	; 0x08
    1d5a:	a9 87       	std	Y+9, r26	; 0x09
    1d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <LCD_voidinit+0x5ec>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	3f c0       	rjmp	.+126    	; 0x1dfe <LCD_voidinit+0x66a>
	else if (__tmp > 65535)
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	57 e4       	ldi	r21, 0x47	; 71
    1d90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	4c f5       	brge	.+82     	; 0x1dea <LCD_voidinit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <LCD_voidinit+0x64c>
    1dc2:	80 e9       	ldi	r24, 0x90	; 144
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_voidinit+0x63a>
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <LCD_voidinit+0x62e>
    1de8:	14 c0       	rjmp	.+40     	; 0x1e12 <LCD_voidinit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_voidinit+0x676>
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    1e12:	cc 5a       	subi	r28, 0xAC	; 172
    1e14:	df 4f       	sbci	r29, 0xFF	; 255
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <LCD_sendData>:



void LCD_sendData                  (uint8 copy_Data)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
#if LCD_Mode == 4
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RS,HIGH);
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RW ,LOW);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
	DIO_setHighFourPins(LCD_DATA_PORT,(copy_Data>>4));
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	98 2f       	mov	r25, r24
    1e4e:	92 95       	swap	r25
    1e50:	9f 70       	andi	r25, 0x0F	; 15
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	69 2f       	mov	r22, r25
    1e56:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1e5a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_SendFallingEdge>
	DIO_setHighFourPins(LCD_DATA_PORT,copy_Data);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	69 81       	ldd	r22, Y+1	; 0x01
    1e62:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1e66:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_SendFallingEdge>
#endif
}
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <LCD_sendCommand>:


void LCD_sendCommand                 (uint8 copy_Data)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	0f 92       	push	r0
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
#if LCD_Mode == 4
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RS,LOW);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	61 e0       	ldi	r22, 0x01	; 1
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RW ,LOW);
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	62 e0       	ldi	r22, 0x02	; 2
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
	DIO_setHighFourPins(LCD_DATA_PORT,(copy_Data>>4));
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	98 2f       	mov	r25, r24
    1e96:	92 95       	swap	r25
    1e98:	9f 70       	andi	r25, 0x0F	; 15
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	69 2f       	mov	r22, r25
    1e9e:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1ea2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_SendFallingEdge>
	DIO_setHighFourPins(LCD_DATA_PORT,copy_Data);
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	69 81       	ldd	r22, Y+1	; 0x01
    1eaa:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1eae:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_SendFallingEdge>
#endif
}
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_SendFallingEdge>:

void LCD_SendFallingEdge (void)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	6c 97       	sbiw	r28, 0x1c	; 28
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_EN ,HIGH);
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	63 e0       	ldi	r22, 0x03	; 3
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e8       	ldi	r26, 0x80	; 128
    1ede:	bf e3       	ldi	r27, 0x3F	; 63
    1ee0:	89 8f       	std	Y+25, r24	; 0x19
    1ee2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a e7       	ldi	r20, 0x7A	; 122
    1ef6:	55 e4       	ldi	r21, 0x45	; 69
    1ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8d 8b       	std	Y+21, r24	; 0x15
    1f02:	9e 8b       	std	Y+22, r25	; 0x16
    1f04:	af 8b       	std	Y+23, r26	; 0x17
    1f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <LCD_SendFallingEdge+0x70>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 8b       	std	Y+20, r25	; 0x14
    1f26:	8b 8b       	std	Y+19, r24	; 0x13
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <LCD_SendFallingEdge+0xee>
	else if (__tmp > 65535)
    1f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f30:	98 8d       	ldd	r25, Y+24	; 0x18
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <LCD_SendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	69 8d       	ldd	r22, Y+25	; 0x19
    1f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9c 8b       	std	Y+20, r25	; 0x14
    1f68:	8b 8b       	std	Y+19, r24	; 0x13
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <LCD_SendFallingEdge+0xd0>
    1f6c:	80 e9       	ldi	r24, 0x90	; 144
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	9a 8b       	std	Y+18, r25	; 0x12
    1f72:	89 8b       	std	Y+17, r24	; 0x11
    1f74:	89 89       	ldd	r24, Y+17	; 0x11
    1f76:	9a 89       	ldd	r25, Y+18	; 0x12
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_SendFallingEdge+0xbe>
    1f7c:	9a 8b       	std	Y+18, r25	; 0x12
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <LCD_SendFallingEdge+0xb2>
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <LCD_SendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	98 8b       	std	Y+16, r25	; 0x10
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	98 89       	ldd	r25, Y+16	; 0x10
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_SendFallingEdge+0xfa>
    1fb8:	98 8b       	std	Y+16, r25	; 0x10
    1fba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_EN ,LOW);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	63 e0       	ldi	r22, 0x03	; 3
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e8       	ldi	r26, 0x80	; 128
    1fcc:	bf e3       	ldi	r27, 0x3F	; 63
    1fce:	8b 87       	std	Y+11, r24	; 0x0b
    1fd0:	9c 87       	std	Y+12, r25	; 0x0c
    1fd2:	ad 87       	std	Y+13, r26	; 0x0d
    1fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a e7       	ldi	r20, 0x7A	; 122
    1fe4:	55 e4       	ldi	r21, 0x45	; 69
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8f 83       	std	Y+7, r24	; 0x07
    1ff0:	98 87       	std	Y+8, r25	; 0x08
    1ff2:	a9 87       	std	Y+9, r26	; 0x09
    1ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <LCD_SendFallingEdge+0x15e>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <LCD_SendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <LCD_SendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	6b 85       	ldd	r22, Y+11	; 0x0b
    2032:	7c 85       	ldd	r23, Y+12	; 0x0c
    2034:	8d 85       	ldd	r24, Y+13	; 0x0d
    2036:	9e 85       	ldd	r25, Y+14	; 0x0e
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9e 83       	std	Y+6, r25	; 0x06
    2056:	8d 83       	std	Y+5, r24	; 0x05
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <LCD_SendFallingEdge+0x1be>
    205a:	80 e9       	ldi	r24, 0x90	; 144
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	8b 83       	std	Y+3, r24	; 0x03
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_SendFallingEdge+0x1ac>
    206a:	9c 83       	std	Y+4, r25	; 0x04
    206c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <LCD_SendFallingEdge+0x1a0>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <LCD_SendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCD_SendFallingEdge+0x1e8>
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20aa:	6c 96       	adiw	r28, 0x1c	; 28
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_CLEAR);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <LCD_sendCommand>
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <LCD_voidString>:

void LCD_voidString                (uint8 * copy_String)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <LCD_voidString+0x6>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	9b 83       	std	Y+3, r25	; 0x03
    20de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 stringIndex = 0;
    20e0:	19 82       	std	Y+1, r1	; 0x01
    20e2:	0e c0       	rjmp	.+28     	; 0x2100 <LCD_voidString+0x30>
	while(copy_String[stringIndex]!= '\0')
	{
		LCD_sendData(copy_String[stringIndex]);
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	fc 01       	movw	r30, r24
    20f0:	e2 0f       	add	r30, r18
    20f2:	f3 1f       	adc	r31, r19
    20f4:	80 81       	ld	r24, Z
    20f6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
		stringIndex ++;
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
    20fe:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidString                (uint8 * copy_String)
{
	uint8 stringIndex = 0;
	while(copy_String[stringIndex]!= '\0')
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	9b 81       	ldd	r25, Y+3	; 0x03
    210a:	fc 01       	movw	r30, r24
    210c:	e2 0f       	add	r30, r18
    210e:	f3 1f       	adc	r31, r19
    2110:	80 81       	ld	r24, Z
    2112:	88 23       	and	r24, r24
    2114:	39 f7       	brne	.-50     	; 0x20e4 <LCD_voidString+0x14>
	{
		LCD_sendData(copy_String[stringIndex]);
		stringIndex ++;
	}
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <LCD_voidSpace>:

void LCD_voidSpace                  (void                )
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	LCD_sendData(' ');
    212a:	80 e2       	ldi	r24, 0x20	; 32
    212c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
}
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <LCD_setPosition>:
void LCD_setPosition                (uint8 copy_Row, uint8 copy_col)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	61 97       	sbiw	r28, 0x11	; 17
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	88 8b       	std	Y+16, r24	; 0x10
    214c:	69 8b       	std	Y+17, r22	; 0x11
	uint8 loc_data;
	if(copy_Row>2 ||copy_Row<1 ||copy_col>16||copy_col<1)
    214e:	88 89       	ldd	r24, Y+16	; 0x10
    2150:	83 30       	cpi	r24, 0x03	; 3
    2152:	48 f4       	brcc	.+18     	; 0x2166 <LCD_setPosition+0x30>
    2154:	88 89       	ldd	r24, Y+16	; 0x10
    2156:	88 23       	and	r24, r24
    2158:	31 f0       	breq	.+12     	; 0x2166 <LCD_setPosition+0x30>
    215a:	89 89       	ldd	r24, Y+17	; 0x11
    215c:	81 31       	cpi	r24, 0x11	; 17
    215e:	18 f4       	brcc	.+6      	; 0x2166 <LCD_setPosition+0x30>
    2160:	89 89       	ldd	r24, Y+17	; 0x11
    2162:	88 23       	and	r24, r24
    2164:	19 f4       	brne	.+6      	; 0x216c <LCD_setPosition+0x36>
	{
		loc_data=SET_CURSOR;
    2166:	80 e8       	ldi	r24, 0x80	; 128
    2168:	8f 87       	std	Y+15, r24	; 0x0f
    216a:	0d c0       	rjmp	.+26     	; 0x2186 <LCD_setPosition+0x50>
	}
	else if(copy_Row ==LCD_ROW_1)
    216c:	88 89       	ldd	r24, Y+16	; 0x10
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	21 f4       	brne	.+8      	; 0x217a <LCD_setPosition+0x44>
	{
		loc_data=(SET_CURSOR) + (copy_col -1);
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	81 58       	subi	r24, 0x81	; 129
    2176:	8f 87       	std	Y+15, r24	; 0x0f
    2178:	06 c0       	rjmp	.+12     	; 0x2186 <LCD_setPosition+0x50>
	}
	else if(copy_Row ==LCD_ROW_2)
    217a:	88 89       	ldd	r24, Y+16	; 0x10
    217c:	82 30       	cpi	r24, 0x02	; 2
    217e:	19 f4       	brne	.+6      	; 0x2186 <LCD_setPosition+0x50>
	{
		loc_data=((SET_CURSOR) +(64) + (copy_col -1));
    2180:	89 89       	ldd	r24, Y+17	; 0x11
    2182:	81 54       	subi	r24, 0x41	; 65
    2184:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_sendCommand(loc_data);
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <LCD_sendCommand>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e8       	ldi	r26, 0x80	; 128
    2192:	bf e3       	ldi	r27, 0x3F	; 63
    2194:	8b 87       	std	Y+11, r24	; 0x0b
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	ad 87       	std	Y+13, r26	; 0x0d
    219a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	55 e4       	ldi	r21, 0x45	; 69
    21ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_setPosition+0xa8>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_setPosition+0x126>
	else if (__tmp > 65535)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_setPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_setPosition+0x108>
    2220:	80 e9       	ldi	r24, 0x90	; 144
    2222:	91 e0       	ldi	r25, 0x01	; 1
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_setPosition+0xf6>
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_setPosition+0xea>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <LCD_setPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_setPosition+0x132>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2270:	61 96       	adiw	r28, 0x11	; 17
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <LCD_WriteNum>:
void LCD_WriteNum                   (uint8 copy_number   )
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	ab 97       	sbiw	r28, 0x2b	; 43
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	8b a7       	std	Y+43, r24	; 0x2b
  if(copy_number<10)
    2298:	8b a5       	ldd	r24, Y+43	; 0x2b
    229a:	8a 30       	cpi	r24, 0x0A	; 10
    229c:	08 f0       	brcs	.+2      	; 0x22a0 <LCD_WriteNum+0x1e>
    229e:	77 c0       	rjmp	.+238    	; 0x238e <LCD_WriteNum+0x10c>
  {
	  LCD_sendData(copy_number+'0');
    22a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a2:	80 5d       	subi	r24, 0xD0	; 208
    22a4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a0 e8       	ldi	r26, 0x80	; 128
    22ae:	bf e3       	ldi	r27, 0x3F	; 63
    22b0:	8f a3       	std	Y+39, r24	; 0x27
    22b2:	98 a7       	std	Y+40, r25	; 0x28
    22b4:	a9 a7       	std	Y+41, r26	; 0x29
    22b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b8:	6f a1       	ldd	r22, Y+39	; 0x27
    22ba:	78 a5       	ldd	r23, Y+40	; 0x28
    22bc:	89 a5       	ldd	r24, Y+41	; 0x29
    22be:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a e7       	ldi	r20, 0x7A	; 122
    22c6:	55 e4       	ldi	r21, 0x45	; 69
    22c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8b a3       	std	Y+35, r24	; 0x23
    22d2:	9c a3       	std	Y+36, r25	; 0x24
    22d4:	ad a3       	std	Y+37, r26	; 0x25
    22d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22d8:	6b a1       	ldd	r22, Y+35	; 0x23
    22da:	7c a1       	ldd	r23, Y+36	; 0x24
    22dc:	8d a1       	ldd	r24, Y+37	; 0x25
    22de:	9e a1       	ldd	r25, Y+38	; 0x26
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	2c f4       	brge	.+10     	; 0x22fa <LCD_WriteNum+0x78>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9a a3       	std	Y+34, r25	; 0x22
    22f6:	89 a3       	std	Y+33, r24	; 0x21
    22f8:	3f c0       	rjmp	.+126    	; 0x2378 <LCD_WriteNum+0xf6>
	else if (__tmp > 65535)
    22fa:	6b a1       	ldd	r22, Y+35	; 0x23
    22fc:	7c a1       	ldd	r23, Y+36	; 0x24
    22fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2300:	9e a1       	ldd	r25, Y+38	; 0x26
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	4c f5       	brge	.+82     	; 0x2364 <LCD_WriteNum+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2312:	6f a1       	ldd	r22, Y+39	; 0x27
    2314:	78 a5       	ldd	r23, Y+40	; 0x28
    2316:	89 a5       	ldd	r24, Y+41	; 0x29
    2318:	9a a5       	ldd	r25, Y+42	; 0x2a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	51 e4       	ldi	r21, 0x41	; 65
    2322:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9a a3       	std	Y+34, r25	; 0x22
    2338:	89 a3       	std	Y+33, r24	; 0x21
    233a:	0f c0       	rjmp	.+30     	; 0x235a <LCD_WriteNum+0xd8>
    233c:	80 e9       	ldi	r24, 0x90	; 144
    233e:	91 e0       	ldi	r25, 0x01	; 1
    2340:	98 a3       	std	Y+32, r25	; 0x20
    2342:	8f 8f       	std	Y+31, r24	; 0x1f
    2344:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2346:	98 a1       	ldd	r25, Y+32	; 0x20
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <LCD_WriteNum+0xc6>
    234c:	98 a3       	std	Y+32, r25	; 0x20
    234e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2350:	89 a1       	ldd	r24, Y+33	; 0x21
    2352:	9a a1       	ldd	r25, Y+34	; 0x22
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	9a a3       	std	Y+34, r25	; 0x22
    2358:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235a:	89 a1       	ldd	r24, Y+33	; 0x21
    235c:	9a a1       	ldd	r25, Y+34	; 0x22
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	69 f7       	brne	.-38     	; 0x233c <LCD_WriteNum+0xba>
    2362:	2d c1       	rjmp	.+602    	; 0x25be <LCD_WriteNum+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2364:	6b a1       	ldd	r22, Y+35	; 0x23
    2366:	7c a1       	ldd	r23, Y+36	; 0x24
    2368:	8d a1       	ldd	r24, Y+37	; 0x25
    236a:	9e a1       	ldd	r25, Y+38	; 0x26
    236c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9a a3       	std	Y+34, r25	; 0x22
    2376:	89 a3       	std	Y+33, r24	; 0x21
    2378:	89 a1       	ldd	r24, Y+33	; 0x21
    237a:	9a a1       	ldd	r25, Y+34	; 0x22
    237c:	9e 8f       	std	Y+30, r25	; 0x1e
    237e:	8d 8f       	std	Y+29, r24	; 0x1d
    2380:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2382:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_WriteNum+0x102>
    2388:	9e 8f       	std	Y+30, r25	; 0x1e
    238a:	8d 8f       	std	Y+29, r24	; 0x1d
    238c:	18 c1       	rjmp	.+560    	; 0x25be <LCD_WriteNum+0x33c>
	  _delay_ms(1);
  }
  else if (copy_number<100)
    238e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2390:	84 36       	cpi	r24, 0x64	; 100
    2392:	08 f0       	brcs	.+2      	; 0x2396 <LCD_WriteNum+0x114>
    2394:	84 c0       	rjmp	.+264    	; 0x249e <LCD_WriteNum+0x21c>
  {
	  LCD_sendData(copy_number/10+'0');
    2396:	8b a5       	ldd	r24, Y+43	; 0x2b
    2398:	9a e0       	ldi	r25, 0x0A	; 10
    239a:	69 2f       	mov	r22, r25
    239c:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodqi4>
    23a0:	80 5d       	subi	r24, 0xD0	; 208
    23a2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
	  LCD_sendData(copy_number%10+'0');
    23a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a8:	9a e0       	ldi	r25, 0x0A	; 10
    23aa:	69 2f       	mov	r22, r25
    23ac:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodqi4>
    23b0:	89 2f       	mov	r24, r25
    23b2:	80 5d       	subi	r24, 0xD0	; 208
    23b4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	89 8f       	std	Y+25, r24	; 0x19
    23c2:	9a 8f       	std	Y+26, r25	; 0x1a
    23c4:	ab 8f       	std	Y+27, r26	; 0x1b
    23c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a e7       	ldi	r20, 0x7A	; 122
    23d6:	55 e4       	ldi	r21, 0x45	; 69
    23d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8d 8b       	std	Y+21, r24	; 0x15
    23e2:	9e 8b       	std	Y+22, r25	; 0x16
    23e4:	af 8b       	std	Y+23, r26	; 0x17
    23e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <LCD_WriteNum+0x188>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <LCD_WriteNum+0x206>
	else if (__tmp > 65535)
    240a:	6d 89       	ldd	r22, Y+21	; 0x15
    240c:	7e 89       	ldd	r23, Y+22	; 0x16
    240e:	8f 89       	ldd	r24, Y+23	; 0x17
    2410:	98 8d       	ldd	r25, Y+24	; 0x18
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <LCD_WriteNum+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	69 8d       	ldd	r22, Y+25	; 0x19
    2424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	0f c0       	rjmp	.+30     	; 0x246a <LCD_WriteNum+0x1e8>
    244c:	80 e9       	ldi	r24, 0x90	; 144
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
    2454:	89 89       	ldd	r24, Y+17	; 0x11
    2456:	9a 89       	ldd	r25, Y+18	; 0x12
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_WriteNum+0x1d6>
    245c:	9a 8b       	std	Y+18, r25	; 0x12
    245e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <LCD_WriteNum+0x1ca>
    2472:	a5 c0       	rjmp	.+330    	; 0x25be <LCD_WriteNum+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6d 89       	ldd	r22, Y+21	; 0x15
    2476:	7e 89       	ldd	r23, Y+22	; 0x16
    2478:	8f 89       	ldd	r24, Y+23	; 0x17
    247a:	98 8d       	ldd	r25, Y+24	; 0x18
    247c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9c 8b       	std	Y+20, r25	; 0x14
    2486:	8b 8b       	std	Y+19, r24	; 0x13
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	98 89       	ldd	r25, Y+16	; 0x10
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_WriteNum+0x212>
    2498:	98 8b       	std	Y+16, r25	; 0x10
    249a:	8f 87       	std	Y+15, r24	; 0x0f
    249c:	90 c0       	rjmp	.+288    	; 0x25be <LCD_WriteNum+0x33c>
	  _delay_ms(1);
  }
  else if(copy_number<1000)
  {
	  LCD_sendData(copy_number/100+'0');
    249e:	8b a5       	ldd	r24, Y+43	; 0x2b
    24a0:	94 e6       	ldi	r25, 0x64	; 100
    24a2:	69 2f       	mov	r22, r25
    24a4:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodqi4>
    24a8:	80 5d       	subi	r24, 0xD0	; 208
    24aa:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
	  LCD_sendData((copy_number%100)/10+'0');
    24ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    24b0:	94 e6       	ldi	r25, 0x64	; 100
    24b2:	69 2f       	mov	r22, r25
    24b4:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodqi4>
    24b8:	89 2f       	mov	r24, r25
    24ba:	9a e0       	ldi	r25, 0x0A	; 10
    24bc:	69 2f       	mov	r22, r25
    24be:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodqi4>
    24c2:	80 5d       	subi	r24, 0xD0	; 208
    24c4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
	  LCD_sendData(copy_number%10+'0');
    24c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ca:	9a e0       	ldi	r25, 0x0A	; 10
    24cc:	69 2f       	mov	r22, r25
    24ce:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodqi4>
    24d2:	89 2f       	mov	r24, r25
    24d4:	80 5d       	subi	r24, 0xD0	; 208
    24d6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 e8       	ldi	r26, 0x80	; 128
    24e0:	bf e3       	ldi	r27, 0x3F	; 63
    24e2:	8b 87       	std	Y+11, r24	; 0x0b
    24e4:	9c 87       	std	Y+12, r25	; 0x0c
    24e6:	ad 87       	std	Y+13, r26	; 0x0d
    24e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a e7       	ldi	r20, 0x7A	; 122
    24f8:	55 e4       	ldi	r21, 0x45	; 69
    24fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8f 83       	std	Y+7, r24	; 0x07
    2504:	98 87       	std	Y+8, r25	; 0x08
    2506:	a9 87       	std	Y+9, r26	; 0x09
    2508:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_WriteNum+0x2aa>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <LCD_WriteNum+0x328>
	else if (__tmp > 65535)
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <LCD_WriteNum+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6b 85       	ldd	r22, Y+11	; 0x0b
    2546:	7c 85       	ldd	r23, Y+12	; 0x0c
    2548:	8d 85       	ldd	r24, Y+13	; 0x0d
    254a:	9e 85       	ldd	r25, Y+14	; 0x0e
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	0f c0       	rjmp	.+30     	; 0x258c <LCD_WriteNum+0x30a>
    256e:	80 e9       	ldi	r24, 0x90	; 144
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_WriteNum+0x2f8>
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <LCD_WriteNum+0x2ec>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <LCD_WriteNum+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_WriteNum+0x334>
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(1);
  }
}
    25be:	ab 96       	adiw	r28, 0x2b	; 43
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <PORT_init>:
#include "PORT_interface.h"



void PORT_init(void)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	DDRA =PORTA_DIR;
    25d8:	ea e3       	ldi	r30, 0x3A	; 58
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	10 82       	st	Z, r1
	DDRB =PORTB_DIR;
    25de:	e7 e3       	ldi	r30, 0x37	; 55
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 ef       	ldi	r24, 0xF0	; 240
    25e4:	80 83       	st	Z, r24
	DDRC =PORTC_DIR;
    25e6:	e4 e3       	ldi	r30, 0x34	; 52
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	10 82       	st	Z, r1
	DDRD =PORTD_DIR;
    25ec:	e1 e3       	ldi	r30, 0x31	; 49
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	10 82       	st	Z, r1

	PORTA =PORTA_VAL;
    25f2:	eb e3       	ldi	r30, 0x3B	; 59
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	10 82       	st	Z, r1
	PORTB =PORTB_VAL;
    25f8:	e8 e3       	ldi	r30, 0x38	; 56
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	8f ef       	ldi	r24, 0xFF	; 255
    25fe:	80 83       	st	Z, r24
	PORTC =PORTC_VAL;
    2600:	e5 e3       	ldi	r30, 0x35	; 53
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	10 82       	st	Z, r1
	PORTD =PORTD_VAL;
    2606:	e2 e3       	ldi	r30, 0x32	; 50
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	10 82       	st	Z, r1

}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <comparPass>:
#include "LCD_interface.h"
#include "ADC_interface.h"
#include "KYP_interface.h"

static uint8 comparPass(uint8 Saved_Pass[],uint8 passArr[])
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	28 97       	sbiw	r28, 0x08	; 8
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	78 87       	std	Y+8, r23	; 0x08
    262c:	6f 83       	std	Y+7, r22	; 0x07
	uint8 state =0;
    262e:	1c 82       	std	Y+4, r1	; 0x04
	uint8 store;
	for(int i=0;i<4;i++)
    2630:	1a 82       	std	Y+2, r1	; 0x02
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	20 c0       	rjmp	.+64     	; 0x2676 <comparPass+0x64>
	{
		if(passArr[i]==Saved_Pass[i])
    2636:	29 81       	ldd	r18, Y+1	; 0x01
    2638:	3a 81       	ldd	r19, Y+2	; 0x02
    263a:	8f 81       	ldd	r24, Y+7	; 0x07
    263c:	98 85       	ldd	r25, Y+8	; 0x08
    263e:	fc 01       	movw	r30, r24
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	40 81       	ld	r20, Z
    2646:	29 81       	ldd	r18, Y+1	; 0x01
    2648:	3a 81       	ldd	r19, Y+2	; 0x02
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	fc 01       	movw	r30, r24
    2650:	e2 0f       	add	r30, r18
    2652:	f3 1f       	adc	r31, r19
    2654:	80 81       	ld	r24, Z
    2656:	48 17       	cp	r20, r24
    2658:	31 f4       	brne	.+12     	; 0x2666 <comparPass+0x54>
		{
			if(state==0)
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	88 23       	and	r24, r24
    265e:	31 f4       	brne	.+12     	; 0x266c <comparPass+0x5a>
			{
				store=1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	03 c0       	rjmp	.+6      	; 0x266c <comparPass+0x5a>
			}
		}
		else
		{
			state=1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	8c 83       	std	Y+4, r24	; 0x04
			store=0;
    266a:	1b 82       	std	Y+3, r1	; 0x03

static uint8 comparPass(uint8 Saved_Pass[],uint8 passArr[])
{
	uint8 state =0;
	uint8 store;
	for(int i=0;i<4;i++)
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	84 30       	cpi	r24, 0x04	; 4
    267c:	91 05       	cpc	r25, r1
    267e:	dc f2       	brlt	.-74     	; 0x2636 <comparPass+0x24>
		{
			state=1;
			store=0;
		}
	}
	return store;
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2682:	28 96       	adiw	r28, 0x08	; 8
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <main>:




int main(void)
{
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	c2 59       	subi	r28, 0x92	; 146
    26a2:	d0 40       	sbci	r29, 0x00	; 0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61

	PORT_init();
    26ae:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <PORT_init>
	ADC_init();
    26b2:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_init>
	LCD_voidinit();
    26b6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_voidinit>
	DIO_setPinDirection(DIO_PORTA,PIN1,OUTPUT);// LEDS
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,PIN2,OUTPUT);//FAN
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	62 e0       	ldi	r22, 0x02	; 2
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 32 06 	call	0xc64	; 0xc64 <DIO_setPinDirection>

	uint8 ADC_value=0;
    26ce:	fe 01       	movw	r30, r28
    26d0:	e8 57       	subi	r30, 0x78	; 120
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	10 82       	st	Z, r1
	uint32 analog=0;
    26d6:	fe 01       	movw	r30, r28
    26d8:	ec 57       	subi	r30, 0x7C	; 124
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	10 82       	st	Z, r1
    26de:	11 82       	std	Z+1, r1	; 0x01
    26e0:	12 82       	std	Z+2, r1	; 0x02
    26e2:	13 82       	std	Z+3, r1	; 0x03
	uint8 temp;
	uint8 Saved_Pass[4]={'1','2','3','4'};
    26e4:	fe 01       	movw	r30, r28
    26e6:	e7 57       	subi	r30, 0x77	; 119
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	81 e3       	ldi	r24, 0x31	; 49
    26ec:	80 83       	st	Z, r24
    26ee:	fe 01       	movw	r30, r28
    26f0:	e7 57       	subi	r30, 0x77	; 119
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	82 e3       	ldi	r24, 0x32	; 50
    26f6:	81 83       	std	Z+1, r24	; 0x01
    26f8:	fe 01       	movw	r30, r28
    26fa:	e7 57       	subi	r30, 0x77	; 119
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	83 e3       	ldi	r24, 0x33	; 51
    2700:	82 83       	std	Z+2, r24	; 0x02
    2702:	fe 01       	movw	r30, r28
    2704:	e7 57       	subi	r30, 0x77	; 119
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	84 e3       	ldi	r24, 0x34	; 52
    270a:	83 83       	std	Z+3, r24	; 0x03
    uint8 passArr[4];
    uint8 passStatus=2;
    270c:	fe 01       	movw	r30, r28
    270e:	ee 57       	subi	r30, 0x7E	; 126
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	80 83       	st	Z, r24
    uint8 iterator=0;
    2716:	fe 01       	movw	r30, r28
    2718:	ef 57       	subi	r30, 0x7F	; 127
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	10 82       	st	Z, r1
    uint8 trails=0;
    271e:	fe 01       	movw	r30, r28
    2720:	e0 58       	subi	r30, 0x80	; 128
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	10 82       	st	Z, r1
    uint8 option=0;
    2726:	fe 01       	movw	r30, r28
    2728:	e1 58       	subi	r30, 0x81	; 129
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	10 82       	st	Z, r1

    LCD_voidString("WELCOME TO SMART");
    272e:	80 e6       	ldi	r24, 0x60	; 96
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    LCD_setPosition(2,7);
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	67 e0       	ldi	r22, 0x07	; 7
    273a:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_setPosition>
    LCD_voidString("HOME");
    273e:	81 e7       	ldi	r24, 0x71	; 113
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    2746:	fe 01       	movw	r30, r28
    2748:	e5 58       	subi	r30, 0x85	; 133
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	aa ef       	ldi	r26, 0xFA	; 250
    2752:	b4 e4       	ldi	r27, 0x44	; 68
    2754:	80 83       	st	Z, r24
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	a2 83       	std	Z+2, r26	; 0x02
    275a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	8e 01       	movw	r16, r28
    275e:	09 58       	subi	r16, 0x89	; 137
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
    2762:	fe 01       	movw	r30, r28
    2764:	e5 58       	subi	r30, 0x85	; 133
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a e7       	ldi	r20, 0x7A	; 122
    2776:	55 e4       	ldi	r21, 0x45	; 69
    2778:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	f8 01       	movw	r30, r16
    2782:	80 83       	st	Z, r24
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	a2 83       	std	Z+2, r26	; 0x02
    2788:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    278a:	fe 01       	movw	r30, r28
    278c:	e9 58       	subi	r30, 0x89	; 137
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	44 f4       	brge	.+16     	; 0x27b8 <main+0x124>
		__ticks = 1;
    27a8:	fe 01       	movw	r30, r28
    27aa:	eb 58       	subi	r30, 0x8B	; 139
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
    27b6:	64 c0       	rjmp	.+200    	; 0x2880 <main+0x1ec>
	else if (__tmp > 65535)
    27b8:	fe 01       	movw	r30, r28
    27ba:	e9 58       	subi	r30, 0x89	; 137
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	0c f0       	brlt	.+2      	; 0x27d8 <main+0x144>
    27d6:	43 c0       	rjmp	.+134    	; 0x285e <main+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	fe 01       	movw	r30, r28
    27da:	e5 58       	subi	r30, 0x85	; 133
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	51 e4       	ldi	r21, 0x41	; 65
    27ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	8e 01       	movw	r16, r28
    27f8:	0b 58       	subi	r16, 0x8B	; 139
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	f8 01       	movw	r30, r16
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	1f c0       	rjmp	.+62     	; 0x284e <main+0x1ba>
    2810:	fe 01       	movw	r30, r28
    2812:	ed 58       	subi	r30, 0x8D	; 141
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 e9       	ldi	r24, 0x90	; 144
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	fe 01       	movw	r30, r28
    2820:	ed 58       	subi	r30, 0x8D	; 141
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <main+0x194>
    282c:	fe 01       	movw	r30, r28
    282e:	ed 58       	subi	r30, 0x8D	; 141
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	de 01       	movw	r26, r28
    2838:	ab 58       	subi	r26, 0x8B	; 139
    283a:	bf 4f       	sbci	r27, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	eb 58       	subi	r30, 0x8B	; 139
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	11 96       	adiw	r26, 0x01	; 1
    284a:	9c 93       	st	X, r25
    284c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284e:	fe 01       	movw	r30, r28
    2850:	eb 58       	subi	r30, 0x8B	; 139
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	d1 f6       	brne	.-76     	; 0x2810 <main+0x17c>
    285c:	27 c0       	rjmp	.+78     	; 0x28ac <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285e:	8e 01       	movw	r16, r28
    2860:	0b 58       	subi	r16, 0x8B	; 139
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	fe 01       	movw	r30, r28
    2866:	e9 58       	subi	r30, 0x89	; 137
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	de 01       	movw	r26, r28
    2882:	af 58       	subi	r26, 0x8F	; 143
    2884:	bf 4f       	sbci	r27, 0xFF	; 255
    2886:	fe 01       	movw	r30, r28
    2888:	eb 58       	subi	r30, 0x8B	; 139
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	8d 93       	st	X+, r24
    2892:	9c 93       	st	X, r25
    2894:	fe 01       	movw	r30, r28
    2896:	ef 58       	subi	r30, 0x8F	; 143
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x20a>
    28a2:	fe 01       	movw	r30, r28
    28a4:	ef 58       	subi	r30, 0x8F	; 143
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
    _delay_ms(2000);
    LCD_ClearScreen();
    28ac:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>
    LCD_voidString("Enter Password:");
    28b0:	86 e7       	ldi	r24, 0x76	; 118
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    LCD_setPosition(2,1);
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_setPosition>
    28c0:	2b c0       	rjmp	.+86     	; 0x2918 <main+0x284>
    while(iterator<4)
    {
    	do
    	{
    	 passArr[iterator]=getPressed();
    28c2:	fe 01       	movw	r30, r28
    28c4:	ef 57       	subi	r30, 0x7F	; 127
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	08 2f       	mov	r16, r24
    28cc:	10 e0       	ldi	r17, 0x00	; 0
    28ce:	0e 94 13 0b 	call	0x1626	; 0x1626 <getPressed>
    28d2:	28 2f       	mov	r18, r24
    28d4:	ce 01       	movw	r24, r28
    28d6:	83 57       	subi	r24, 0x73	; 115
    28d8:	9f 4f       	sbci	r25, 0xFF	; 255
    28da:	fc 01       	movw	r30, r24
    28dc:	e0 0f       	add	r30, r16
    28de:	f1 1f       	adc	r31, r17
    28e0:	20 83       	st	Z, r18
    	}while(passArr[iterator] ==0xff);
    28e2:	fe 01       	movw	r30, r28
    28e4:	ef 57       	subi	r30, 0x7F	; 127
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	ce 01       	movw	r24, r28
    28f0:	83 57       	subi	r24, 0x73	; 115
    28f2:	9f 4f       	sbci	r25, 0xFF	; 255
    28f4:	fc 01       	movw	r30, r24
    28f6:	e2 0f       	add	r30, r18
    28f8:	f3 1f       	adc	r31, r19
    28fa:	80 81       	ld	r24, Z
    28fc:	8f 3f       	cpi	r24, 0xFF	; 255
    28fe:	09 f3       	breq	.-62     	; 0x28c2 <main+0x22e>
    	LCD_sendData('*');
    2900:	8a e2       	ldi	r24, 0x2A	; 42
    2902:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
    	iterator++;
    2906:	de 01       	movw	r26, r28
    2908:	af 57       	subi	r26, 0x7F	; 127
    290a:	bf 4f       	sbci	r27, 0xFF	; 255
    290c:	fe 01       	movw	r30, r28
    290e:	ef 57       	subi	r30, 0x7F	; 127
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	8f 5f       	subi	r24, 0xFF	; 255
    2916:	8c 93       	st	X, r24
    LCD_voidString("HOME");
    _delay_ms(2000);
    LCD_ClearScreen();
    LCD_voidString("Enter Password:");
    LCD_setPosition(2,1);
    while(iterator<4)
    2918:	fe 01       	movw	r30, r28
    291a:	ef 57       	subi	r30, 0x7F	; 127
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	84 30       	cpi	r24, 0x04	; 4
    2922:	78 f2       	brcs	.-98     	; 0x28c2 <main+0x22e>
    2924:	fe 01       	movw	r30, r28
    2926:	e3 59       	subi	r30, 0x93	; 147
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	aa e7       	ldi	r26, 0x7A	; 122
    2930:	b4 e4       	ldi	r27, 0x44	; 68
    2932:	80 83       	st	Z, r24
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	a2 83       	std	Z+2, r26	; 0x02
    2938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	8e 01       	movw	r16, r28
    293c:	07 59       	subi	r16, 0x97	; 151
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	fe 01       	movw	r30, r28
    2942:	e3 59       	subi	r30, 0x93	; 147
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a e7       	ldi	r20, 0x7A	; 122
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	f8 01       	movw	r30, r16
    2960:	80 83       	st	Z, r24
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	a2 83       	std	Z+2, r26	; 0x02
    2966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2968:	fe 01       	movw	r30, r28
    296a:	e7 59       	subi	r30, 0x97	; 151
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	60 81       	ld	r22, Z
    2970:	71 81       	ldd	r23, Z+1	; 0x01
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	93 81       	ldd	r25, Z+3	; 0x03
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	44 f4       	brge	.+16     	; 0x2996 <main+0x302>
		__ticks = 1;
    2986:	fe 01       	movw	r30, r28
    2988:	e9 59       	subi	r30, 0x99	; 153
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	64 c0       	rjmp	.+200    	; 0x2a5e <main+0x3ca>
	else if (__tmp > 65535)
    2996:	fe 01       	movw	r30, r28
    2998:	e7 59       	subi	r30, 0x97	; 151
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	3f ef       	ldi	r19, 0xFF	; 255
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	57 e4       	ldi	r21, 0x47	; 71
    29ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	0c f0       	brlt	.+2      	; 0x29b6 <main+0x322>
    29b4:	43 c0       	rjmp	.+134    	; 0x2a3c <main+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	fe 01       	movw	r30, r28
    29b8:	e3 59       	subi	r30, 0x93	; 147
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8e 01       	movw	r16, r28
    29d6:	09 59       	subi	r16, 0x99	; 153
    29d8:	1f 4f       	sbci	r17, 0xFF	; 255
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	f8 01       	movw	r30, r16
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
    29ec:	1f c0       	rjmp	.+62     	; 0x2a2c <main+0x398>
    29ee:	fe 01       	movw	r30, r28
    29f0:	eb 59       	subi	r30, 0x9B	; 155
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 e9       	ldi	r24, 0x90	; 144
    29f6:	91 e0       	ldi	r25, 0x01	; 1
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	fe 01       	movw	r30, r28
    29fe:	eb 59       	subi	r30, 0x9B	; 155
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
    2a04:	91 81       	ldd	r25, Z+1	; 0x01
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <main+0x372>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	eb 59       	subi	r30, 0x9B	; 155
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	de 01       	movw	r26, r28
    2a16:	a9 59       	subi	r26, 0x99	; 153
    2a18:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e9 59       	subi	r30, 0x99	; 153
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	11 96       	adiw	r26, 0x01	; 1
    2a28:	9c 93       	st	X, r25
    2a2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e9 59       	subi	r30, 0x99	; 153
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	d1 f6       	brne	.-76     	; 0x29ee <main+0x35a>
    2a3a:	27 c0       	rjmp	.+78     	; 0x2a8a <main+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	8e 01       	movw	r16, r28
    2a3e:	09 59       	subi	r16, 0x99	; 153
    2a40:	1f 4f       	sbci	r17, 0xFF	; 255
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 59       	subi	r30, 0x97	; 151
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	60 81       	ld	r22, Z
    2a4a:	71 81       	ldd	r23, Z+1	; 0x01
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	f8 01       	movw	r30, r16
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
    2a5e:	de 01       	movw	r26, r28
    2a60:	ad 59       	subi	r26, 0x9D	; 157
    2a62:	bf 4f       	sbci	r27, 0xFF	; 255
    2a64:	fe 01       	movw	r30, r28
    2a66:	e9 59       	subi	r30, 0x99	; 153
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	8d 93       	st	X+, r24
    2a70:	9c 93       	st	X, r25
    2a72:	fe 01       	movw	r30, r28
    2a74:	ed 59       	subi	r30, 0x9D	; 157
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <main+0x3e8>
    2a80:	fe 01       	movw	r30, r28
    2a82:	ed 59       	subi	r30, 0x9D	; 157
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
    	}while(passArr[iterator] ==0xff);
    	LCD_sendData('*');
    	iterator++;
    }
    _delay_ms(1000);
    LCD_ClearScreen();
    2a8a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e1 5a       	subi	r30, 0xA1	; 161
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	a0 e8       	ldi	r26, 0x80	; 128
    2a9a:	bf e3       	ldi	r27, 0x3F	; 63
    2a9c:	80 83       	st	Z, r24
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	a2 83       	std	Z+2, r26	; 0x02
    2aa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa4:	8e 01       	movw	r16, r28
    2aa6:	05 5a       	subi	r16, 0xA5	; 165
    2aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e1 5a       	subi	r30, 0xA1	; 161
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a e7       	ldi	r20, 0x7A	; 122
    2abe:	55 e4       	ldi	r21, 0x45	; 69
    2ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	f8 01       	movw	r30, r16
    2aca:	80 83       	st	Z, r24
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	a2 83       	std	Z+2, r26	; 0x02
    2ad0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e5 5a       	subi	r30, 0xA5	; 165
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	44 f4       	brge	.+16     	; 0x2b00 <main+0x46c>
		__ticks = 1;
    2af0:	fe 01       	movw	r30, r28
    2af2:	e7 5a       	subi	r30, 0xA7	; 167
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
    2afe:	64 c0       	rjmp	.+200    	; 0x2bc8 <main+0x534>
	else if (__tmp > 65535)
    2b00:	fe 01       	movw	r30, r28
    2b02:	e5 5a       	subi	r30, 0xA5	; 165
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	60 81       	ld	r22, Z
    2b08:	71 81       	ldd	r23, Z+1	; 0x01
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	0c f0       	brlt	.+2      	; 0x2b20 <main+0x48c>
    2b1e:	43 c0       	rjmp	.+134    	; 0x2ba6 <main+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b20:	fe 01       	movw	r30, r28
    2b22:	e1 5a       	subi	r30, 0xA1	; 161
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8e 01       	movw	r16, r28
    2b40:	07 5a       	subi	r16, 0xA7	; 167
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	f8 01       	movw	r30, r16
    2b52:	91 83       	std	Z+1, r25	; 0x01
    2b54:	80 83       	st	Z, r24
    2b56:	1f c0       	rjmp	.+62     	; 0x2b96 <main+0x502>
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e9 5a       	subi	r30, 0xA9	; 169
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 e9       	ldi	r24, 0x90	; 144
    2b60:	91 e0       	ldi	r25, 0x01	; 1
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
    2b66:	fe 01       	movw	r30, r28
    2b68:	e9 5a       	subi	r30, 0xA9	; 169
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <main+0x4dc>
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 5a       	subi	r30, 0xA9	; 169
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	de 01       	movw	r26, r28
    2b80:	a7 5a       	subi	r26, 0xA7	; 167
    2b82:	bf 4f       	sbci	r27, 0xFF	; 255
    2b84:	fe 01       	movw	r30, r28
    2b86:	e7 5a       	subi	r30, 0xA7	; 167
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	11 96       	adiw	r26, 0x01	; 1
    2b92:	9c 93       	st	X, r25
    2b94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 5a       	subi	r30, 0xA7	; 167
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	d1 f6       	brne	.-76     	; 0x2b58 <main+0x4c4>
    2ba4:	27 c0       	rjmp	.+78     	; 0x2bf4 <main+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba6:	8e 01       	movw	r16, r28
    2ba8:	07 5a       	subi	r16, 0xA7	; 167
    2baa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bac:	fe 01       	movw	r30, r28
    2bae:	e5 5a       	subi	r30, 0xA5	; 165
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	60 81       	ld	r22, Z
    2bb4:	71 81       	ldd	r23, Z+1	; 0x01
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	93 81       	ldd	r25, Z+3	; 0x03
    2bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
    2bc8:	de 01       	movw	r26, r28
    2bca:	ab 5a       	subi	r26, 0xAB	; 171
    2bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e7 5a       	subi	r30, 0xA7	; 167
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	8d 93       	st	X+, r24
    2bda:	9c 93       	st	X, r25
    2bdc:	fe 01       	movw	r30, r28
    2bde:	eb 5a       	subi	r30, 0xAB	; 171
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <main+0x552>
    2bea:	fe 01       	movw	r30, r28
    2bec:	eb 5a       	subi	r30, 0xAB	; 171
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	80 83       	st	Z, r24
    _delay_ms(1);
    while(1)
    {
    	passStatus=comparPass(Saved_Pass,passArr);
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	87 57       	subi	r24, 0x77	; 119
    2bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfa:	9e 01       	movw	r18, r28
    2bfc:	23 57       	subi	r18, 0x73	; 115
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	b9 01       	movw	r22, r18
    2c02:	0e 94 09 13 	call	0x2612	; 0x2612 <comparPass>
    2c06:	fe 01       	movw	r30, r28
    2c08:	ee 57       	subi	r30, 0x7E	; 126
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 83       	st	Z, r24
    	if(passStatus == FALSE)
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ee 57       	subi	r30, 0x7E	; 126
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	88 23       	and	r24, r24
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <main+0x588>
    2c1a:	8f c1       	rjmp	.+798    	; 0x2f3a <main+0x8a6>
    	{
    		trails++;
    2c1c:	de 01       	movw	r26, r28
    2c1e:	a0 58       	subi	r26, 0x80	; 128
    2c20:	bf 4f       	sbci	r27, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	e0 58       	subi	r30, 0x80	; 128
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	8f 5f       	subi	r24, 0xFF	; 255
    2c2c:	8c 93       	st	X, r24
    		if(trails ==3)
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e0 58       	subi	r30, 0x80	; 128
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	83 30       	cpi	r24, 0x03	; 3
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <main+0x5a8>
    2c3a:	4a c4       	rjmp	.+2196   	; 0x34d0 <main+0xe3c>
    		{
    			break;
    		}
    		LCD_voidString("Wrong Password");
    2c3c:	86 e8       	ldi	r24, 0x86	; 134
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    2c44:	fe 01       	movw	r30, r28
    2c46:	ef 5a       	subi	r30, 0xAF	; 175
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	aa e7       	ldi	r26, 0x7A	; 122
    2c50:	b4 e4       	ldi	r27, 0x44	; 68
    2c52:	80 83       	st	Z, r24
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	a2 83       	std	Z+2, r26	; 0x02
    2c58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	8e 01       	movw	r16, r28
    2c5c:	03 5b       	subi	r16, 0xB3	; 179
    2c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 5a       	subi	r30, 0xAF	; 175
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a e7       	ldi	r20, 0x7A	; 122
    2c74:	55 e4       	ldi	r21, 0x45	; 69
    2c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	f8 01       	movw	r30, r16
    2c80:	80 83       	st	Z, r24
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	a2 83       	std	Z+2, r26	; 0x02
    2c86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e3 5b       	subi	r30, 0xB3	; 179
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	44 f4       	brge	.+16     	; 0x2cb6 <main+0x622>
		__ticks = 1;
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e5 5b       	subi	r30, 0xB5	; 181
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	64 c0       	rjmp	.+200    	; 0x2d7e <main+0x6ea>
	else if (__tmp > 65535)
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e3 5b       	subi	r30, 0xB3	; 179
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	60 81       	ld	r22, Z
    2cbe:	71 81       	ldd	r23, Z+1	; 0x01
    2cc0:	82 81       	ldd	r24, Z+2	; 0x02
    2cc2:	93 81       	ldd	r25, Z+3	; 0x03
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	57 e4       	ldi	r21, 0x47	; 71
    2ccc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	0c f0       	brlt	.+2      	; 0x2cd6 <main+0x642>
    2cd4:	43 c0       	rjmp	.+134    	; 0x2d5c <main+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ef 5a       	subi	r30, 0xAF	; 175
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e2       	ldi	r20, 0x20	; 32
    2cea:	51 e4       	ldi	r21, 0x41	; 65
    2cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	05 5b       	subi	r16, 0xB5	; 181
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	f8 01       	movw	r30, r16
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	1f c0       	rjmp	.+62     	; 0x2d4c <main+0x6b8>
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e7 5b       	subi	r30, 0xB7	; 183
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 e9       	ldi	r24, 0x90	; 144
    2d16:	91 e0       	ldi	r25, 0x01	; 1
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	80 83       	st	Z, r24
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e7 5b       	subi	r30, 0xB7	; 183
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <main+0x692>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e7 5b       	subi	r30, 0xB7	; 183
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	de 01       	movw	r26, r28
    2d36:	a5 5b       	subi	r26, 0xB5	; 181
    2d38:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e5 5b       	subi	r30, 0xB5	; 181
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	11 96       	adiw	r26, 0x01	; 1
    2d48:	9c 93       	st	X, r25
    2d4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e5 5b       	subi	r30, 0xB5	; 181
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	d1 f6       	brne	.-76     	; 0x2d0e <main+0x67a>
    2d5a:	27 c0       	rjmp	.+78     	; 0x2daa <main+0x716>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5c:	8e 01       	movw	r16, r28
    2d5e:	05 5b       	subi	r16, 0xB5	; 181
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	fe 01       	movw	r30, r28
    2d64:	e3 5b       	subi	r30, 0xB3	; 179
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	60 81       	ld	r22, Z
    2d6a:	71 81       	ldd	r23, Z+1	; 0x01
    2d6c:	82 81       	ldd	r24, Z+2	; 0x02
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	de 01       	movw	r26, r28
    2d80:	a9 5b       	subi	r26, 0xB9	; 185
    2d82:	bf 4f       	sbci	r27, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	e5 5b       	subi	r30, 0xB5	; 181
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	8d 93       	st	X+, r24
    2d90:	9c 93       	st	X, r25
    2d92:	fe 01       	movw	r30, r28
    2d94:	e9 5b       	subi	r30, 0xB9	; 185
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <main+0x708>
    2da0:	fe 01       	movw	r30, r28
    2da2:	e9 5b       	subi	r30, 0xB9	; 185
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	80 83       	st	Z, r24
    		_delay_ms(1000);
    		LCD_ClearScreen();
    2daa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>
    		LCD_voidString("Password again");
    2dae:	85 e9       	ldi	r24, 0x95	; 149
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    		LCD_setPosition(2,1);
    2db6:	82 e0       	ldi	r24, 0x02	; 2
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_setPosition>
    		iterator=0;
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ef 57       	subi	r30, 0x7F	; 127
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	10 82       	st	Z, r1
    2dc6:	2b c0       	rjmp	.+86     	; 0x2e1e <main+0x78a>
		  while(iterator<4)
			{
				do
				{
				 passArr[iterator]=getPressed();
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ef 57       	subi	r30, 0x7F	; 127
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	08 2f       	mov	r16, r24
    2dd2:	10 e0       	ldi	r17, 0x00	; 0
    2dd4:	0e 94 13 0b 	call	0x1626	; 0x1626 <getPressed>
    2dd8:	28 2f       	mov	r18, r24
    2dda:	ce 01       	movw	r24, r28
    2ddc:	83 57       	subi	r24, 0x73	; 115
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	fc 01       	movw	r30, r24
    2de2:	e0 0f       	add	r30, r16
    2de4:	f1 1f       	adc	r31, r17
    2de6:	20 83       	st	Z, r18
				}while(passArr[iterator] ==0xff);
    2de8:	fe 01       	movw	r30, r28
    2dea:	ef 57       	subi	r30, 0x7F	; 127
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	ce 01       	movw	r24, r28
    2df6:	83 57       	subi	r24, 0x73	; 115
    2df8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	e2 0f       	add	r30, r18
    2dfe:	f3 1f       	adc	r31, r19
    2e00:	80 81       	ld	r24, Z
    2e02:	8f 3f       	cpi	r24, 0xFF	; 255
    2e04:	09 f3       	breq	.-62     	; 0x2dc8 <main+0x734>
				LCD_sendData('*');
    2e06:	8a e2       	ldi	r24, 0x2A	; 42
    2e08:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_sendData>
				iterator++;
    2e0c:	de 01       	movw	r26, r28
    2e0e:	af 57       	subi	r26, 0x7F	; 127
    2e10:	bf 4f       	sbci	r27, 0xFF	; 255
    2e12:	fe 01       	movw	r30, r28
    2e14:	ef 57       	subi	r30, 0x7F	; 127
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	8f 5f       	subi	r24, 0xFF	; 255
    2e1c:	8c 93       	st	X, r24
    		_delay_ms(1000);
    		LCD_ClearScreen();
    		LCD_voidString("Password again");
    		LCD_setPosition(2,1);
    		iterator=0;
		  while(iterator<4)
    2e1e:	fe 01       	movw	r30, r28
    2e20:	ef 57       	subi	r30, 0x7F	; 127
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	84 30       	cpi	r24, 0x04	; 4
    2e28:	78 f2       	brcs	.-98     	; 0x2dc8 <main+0x734>
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ed 5b       	subi	r30, 0xBD	; 189
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	aa e7       	ldi	r26, 0x7A	; 122
    2e36:	b4 e4       	ldi	r27, 0x44	; 68
    2e38:	80 83       	st	Z, r24
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	a2 83       	std	Z+2, r26	; 0x02
    2e3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e40:	8e 01       	movw	r16, r28
    2e42:	01 5c       	subi	r16, 0xC1	; 193
    2e44:	1f 4f       	sbci	r17, 0xFF	; 255
    2e46:	fe 01       	movw	r30, r28
    2e48:	ed 5b       	subi	r30, 0xBD	; 189
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	60 81       	ld	r22, Z
    2e4e:	71 81       	ldd	r23, Z+1	; 0x01
    2e50:	82 81       	ldd	r24, Z+2	; 0x02
    2e52:	93 81       	ldd	r25, Z+3	; 0x03
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a e7       	ldi	r20, 0x7A	; 122
    2e5a:	55 e4       	ldi	r21, 0x45	; 69
    2e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	f8 01       	movw	r30, r16
    2e66:	80 83       	st	Z, r24
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	a2 83       	std	Z+2, r26	; 0x02
    2e6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ff 96       	adiw	r30, 0x3f	; 63
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e8       	ldi	r20, 0x80	; 128
    2e80:	5f e3       	ldi	r21, 0x3F	; 63
    2e82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e86:	88 23       	and	r24, r24
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <main+0x800>
		__ticks = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9e af       	std	Y+62, r25	; 0x3e
    2e90:	8d af       	std	Y+61, r24	; 0x3d
    2e92:	46 c0       	rjmp	.+140    	; 0x2f20 <main+0x88c>
	else if (__tmp > 65535)
    2e94:	fe 01       	movw	r30, r28
    2e96:	ff 96       	adiw	r30, 0x3f	; 63
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	64 f5       	brge	.+88     	; 0x2f08 <main+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	ed 5b       	subi	r30, 0xBD	; 189
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9e af       	std	Y+62, r25	; 0x3e
    2edc:	8d af       	std	Y+61, r24	; 0x3d
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <main+0x86a>
    2ee0:	80 e9       	ldi	r24, 0x90	; 144
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	9c af       	std	Y+60, r25	; 0x3c
    2ee6:	8b af       	std	Y+59, r24	; 0x3b
    2ee8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2eea:	9c ad       	ldd	r25, Y+60	; 0x3c
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <main+0x858>
    2ef0:	9c af       	std	Y+60, r25	; 0x3c
    2ef2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9e af       	std	Y+62, r25	; 0x3e
    2efc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <main+0x84c>
    2f06:	16 c0       	rjmp	.+44     	; 0x2f34 <main+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ff 96       	adiw	r30, 0x3f	; 63
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9e af       	std	Y+62, r25	; 0x3e
    2f1e:	8d af       	std	Y+61, r24	; 0x3d
    2f20:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f22:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f24:	9a af       	std	Y+58, r25	; 0x3a
    2f26:	89 af       	std	Y+57, r24	; 0x39
    2f28:	89 ad       	ldd	r24, Y+57	; 0x39
    2f2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <main+0x898>
    2f30:	9a af       	std	Y+58, r25	; 0x3a
    2f32:	89 af       	std	Y+57, r24	; 0x39
				}while(passArr[iterator] ==0xff);
				LCD_sendData('*');
				iterator++;
			}
		  _delay_ms(1000);
		  LCD_ClearScreen();
    2f34:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>
    2f38:	5d ce       	rjmp	.-838    	; 0x2bf4 <main+0x560>

    		}
    	else if(passStatus == TRUE)
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ee 57       	subi	r30, 0x7E	; 126
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <main+0x8b4>
    2f46:	56 ce       	rjmp	.-852    	; 0x2bf4 <main+0x560>
    	{
    		LCD_voidString("Choose Option:");
    2f48:	84 ea       	ldi	r24, 0xA4	; 164
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    		LCD_setPosition(2,1);
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_setPosition>
    		LCD_voidString("1-Display Temp");
    2f58:	83 eb       	ldi	r24, 0xB3	; 179
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	aa e7       	ldi	r26, 0x7A	; 122
    2f66:	b4 e4       	ldi	r27, 0x44	; 68
    2f68:	8d ab       	std	Y+53, r24	; 0x35
    2f6a:	9e ab       	std	Y+54, r25	; 0x36
    2f6c:	af ab       	std	Y+55, r26	; 0x37
    2f6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6d a9       	ldd	r22, Y+53	; 0x35
    2f72:	7e a9       	ldd	r23, Y+54	; 0x36
    2f74:	8f a9       	ldd	r24, Y+55	; 0x37
    2f76:	98 ad       	ldd	r25, Y+56	; 0x38
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	89 ab       	std	Y+49, r24	; 0x31
    2f8a:	9a ab       	std	Y+50, r25	; 0x32
    2f8c:	ab ab       	std	Y+51, r26	; 0x33
    2f8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f90:	69 a9       	ldd	r22, Y+49	; 0x31
    2f92:	7a a9       	ldd	r23, Y+50	; 0x32
    2f94:	8b a9       	ldd	r24, Y+51	; 0x33
    2f96:	9c a9       	ldd	r25, Y+52	; 0x34
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <main+0x91e>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	98 ab       	std	Y+48, r25	; 0x30
    2fae:	8f a7       	std	Y+47, r24	; 0x2f
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <main+0x99c>
	else if (__tmp > 65535)
    2fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <main+0x988>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6d a9       	ldd	r22, Y+53	; 0x35
    2fcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fce:	8f a9       	ldd	r24, Y+55	; 0x37
    2fd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	98 ab       	std	Y+48, r25	; 0x30
    2ff0:	8f a7       	std	Y+47, r24	; 0x2f
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <main+0x97e>
    2ff4:	80 e9       	ldi	r24, 0x90	; 144
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	9e a7       	std	Y+46, r25	; 0x2e
    2ffa:	8d a7       	std	Y+45, r24	; 0x2d
    2ffc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ffe:	9e a5       	ldd	r25, Y+46	; 0x2e
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <main+0x96c>
    3004:	9e a7       	std	Y+46, r25	; 0x2e
    3006:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8f a5       	ldd	r24, Y+47	; 0x2f
    300a:	98 a9       	ldd	r25, Y+48	; 0x30
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	98 ab       	std	Y+48, r25	; 0x30
    3010:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8f a5       	ldd	r24, Y+47	; 0x2f
    3014:	98 a9       	ldd	r25, Y+48	; 0x30
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <main+0x960>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <main+0x9b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	69 a9       	ldd	r22, Y+49	; 0x31
    301e:	7a a9       	ldd	r23, Y+50	; 0x32
    3020:	8b a9       	ldd	r24, Y+51	; 0x33
    3022:	9c a9       	ldd	r25, Y+52	; 0x34
    3024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	98 ab       	std	Y+48, r25	; 0x30
    302e:	8f a7       	std	Y+47, r24	; 0x2f
    3030:	8f a5       	ldd	r24, Y+47	; 0x2f
    3032:	98 a9       	ldd	r25, Y+48	; 0x30
    3034:	9c a7       	std	Y+44, r25	; 0x2c
    3036:	8b a7       	std	Y+43, r24	; 0x2b
    3038:	8b a5       	ldd	r24, Y+43	; 0x2b
    303a:	9c a5       	ldd	r25, Y+44	; 0x2c
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <main+0x9a8>
    3040:	9c a7       	std	Y+44, r25	; 0x2c
    3042:	8b a7       	std	Y+43, r24	; 0x2b
    		 _delay_ms(1000);
    		 LCD_ClearScreen();
    3044:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>

    		 LCD_voidString("2-FAN ON");
    3048:	82 ec       	ldi	r24, 0xC2	; 194
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    		 LCD_setPosition(2,1);
    3050:	82 e0       	ldi	r24, 0x02	; 2
    3052:	61 e0       	ldi	r22, 0x01	; 1
    3054:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_setPosition>
    		 LCD_voidString("3-FAN OFF");
    3058:	8b ec       	ldi	r24, 0xCB	; 203
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	aa e7       	ldi	r26, 0x7A	; 122
    3066:	b4 e4       	ldi	r27, 0x44	; 68
    3068:	8f a3       	std	Y+39, r24	; 0x27
    306a:	98 a7       	std	Y+40, r25	; 0x28
    306c:	a9 a7       	std	Y+41, r26	; 0x29
    306e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3070:	6f a1       	ldd	r22, Y+39	; 0x27
    3072:	78 a5       	ldd	r23, Y+40	; 0x28
    3074:	89 a5       	ldd	r24, Y+41	; 0x29
    3076:	9a a5       	ldd	r25, Y+42	; 0x2a
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4a e7       	ldi	r20, 0x7A	; 122
    307e:	55 e4       	ldi	r21, 0x45	; 69
    3080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8b a3       	std	Y+35, r24	; 0x23
    308a:	9c a3       	std	Y+36, r25	; 0x24
    308c:	ad a3       	std	Y+37, r26	; 0x25
    308e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3090:	6b a1       	ldd	r22, Y+35	; 0x23
    3092:	7c a1       	ldd	r23, Y+36	; 0x24
    3094:	8d a1       	ldd	r24, Y+37	; 0x25
    3096:	9e a1       	ldd	r25, Y+38	; 0x26
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30a4:	88 23       	and	r24, r24
    30a6:	2c f4       	brge	.+10     	; 0x30b2 <main+0xa1e>
		__ticks = 1;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	9a a3       	std	Y+34, r25	; 0x22
    30ae:	89 a3       	std	Y+33, r24	; 0x21
    30b0:	3f c0       	rjmp	.+126    	; 0x3130 <main+0xa9c>
	else if (__tmp > 65535)
    30b2:	6b a1       	ldd	r22, Y+35	; 0x23
    30b4:	7c a1       	ldd	r23, Y+36	; 0x24
    30b6:	8d a1       	ldd	r24, Y+37	; 0x25
    30b8:	9e a1       	ldd	r25, Y+38	; 0x26
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	3f ef       	ldi	r19, 0xFF	; 255
    30be:	4f e7       	ldi	r20, 0x7F	; 127
    30c0:	57 e4       	ldi	r21, 0x47	; 71
    30c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30c6:	18 16       	cp	r1, r24
    30c8:	4c f5       	brge	.+82     	; 0x311c <main+0xa88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6f a1       	ldd	r22, Y+39	; 0x27
    30cc:	78 a5       	ldd	r23, Y+40	; 0x28
    30ce:	89 a5       	ldd	r24, Y+41	; 0x29
    30d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9a a3       	std	Y+34, r25	; 0x22
    30f0:	89 a3       	std	Y+33, r24	; 0x21
    30f2:	0f c0       	rjmp	.+30     	; 0x3112 <main+0xa7e>
    30f4:	80 e9       	ldi	r24, 0x90	; 144
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	98 a3       	std	Y+32, r25	; 0x20
    30fa:	8f 8f       	std	Y+31, r24	; 0x1f
    30fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30fe:	98 a1       	ldd	r25, Y+32	; 0x20
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <main+0xa6c>
    3104:	98 a3       	std	Y+32, r25	; 0x20
    3106:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3108:	89 a1       	ldd	r24, Y+33	; 0x21
    310a:	9a a1       	ldd	r25, Y+34	; 0x22
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	9a a3       	std	Y+34, r25	; 0x22
    3110:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3112:	89 a1       	ldd	r24, Y+33	; 0x21
    3114:	9a a1       	ldd	r25, Y+34	; 0x22
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	69 f7       	brne	.-38     	; 0x30f4 <main+0xa60>
    311a:	14 c0       	rjmp	.+40     	; 0x3144 <main+0xab0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311c:	6b a1       	ldd	r22, Y+35	; 0x23
    311e:	7c a1       	ldd	r23, Y+36	; 0x24
    3120:	8d a1       	ldd	r24, Y+37	; 0x25
    3122:	9e a1       	ldd	r25, Y+38	; 0x26
    3124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9a a3       	std	Y+34, r25	; 0x22
    312e:	89 a3       	std	Y+33, r24	; 0x21
    3130:	89 a1       	ldd	r24, Y+33	; 0x21
    3132:	9a a1       	ldd	r25, Y+34	; 0x22
    3134:	9e 8f       	std	Y+30, r25	; 0x1e
    3136:	8d 8f       	std	Y+29, r24	; 0x1d
    3138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    313a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <main+0xaa8>
    3140:	9e 8f       	std	Y+30, r25	; 0x1e
    3142:	8d 8f       	std	Y+29, r24	; 0x1d
    		 _delay_ms(1000);
    		  LCD_ClearScreen();
    3144:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>
    		  LCD_voidString("4-Light ON");
    3148:	85 ed       	ldi	r24, 0xD5	; 213
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    		  LCD_setPosition(2,1);
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	61 e0       	ldi	r22, 0x01	; 1
    3154:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_setPosition>
    		  LCD_voidString("5-Light OFF");
    3158:	80 ee       	ldi	r24, 0xE0	; 224
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	aa e7       	ldi	r26, 0x7A	; 122
    3166:	b4 e4       	ldi	r27, 0x44	; 68
    3168:	89 8f       	std	Y+25, r24	; 0x19
    316a:	9a 8f       	std	Y+26, r25	; 0x1a
    316c:	ab 8f       	std	Y+27, r26	; 0x1b
    316e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3170:	69 8d       	ldd	r22, Y+25	; 0x19
    3172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	4a e7       	ldi	r20, 0x7A	; 122
    317e:	55 e4       	ldi	r21, 0x45	; 69
    3180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	8d 8b       	std	Y+21, r24	; 0x15
    318a:	9e 8b       	std	Y+22, r25	; 0x16
    318c:	af 8b       	std	Y+23, r26	; 0x17
    318e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3190:	6d 89       	ldd	r22, Y+21	; 0x15
    3192:	7e 89       	ldd	r23, Y+22	; 0x16
    3194:	8f 89       	ldd	r24, Y+23	; 0x17
    3196:	98 8d       	ldd	r25, Y+24	; 0x18
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e8       	ldi	r20, 0x80	; 128
    319e:	5f e3       	ldi	r21, 0x3F	; 63
    31a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31a4:	88 23       	and	r24, r24
    31a6:	2c f4       	brge	.+10     	; 0x31b2 <main+0xb1e>
		__ticks = 1;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	9c 8b       	std	Y+20, r25	; 0x14
    31ae:	8b 8b       	std	Y+19, r24	; 0x13
    31b0:	3f c0       	rjmp	.+126    	; 0x3230 <main+0xb9c>
	else if (__tmp > 65535)
    31b2:	6d 89       	ldd	r22, Y+21	; 0x15
    31b4:	7e 89       	ldd	r23, Y+22	; 0x16
    31b6:	8f 89       	ldd	r24, Y+23	; 0x17
    31b8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	3f ef       	ldi	r19, 0xFF	; 255
    31be:	4f e7       	ldi	r20, 0x7F	; 127
    31c0:	57 e4       	ldi	r21, 0x47	; 71
    31c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31c6:	18 16       	cp	r1, r24
    31c8:	4c f5       	brge	.+82     	; 0x321c <main+0xb88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ca:	69 8d       	ldd	r22, Y+25	; 0x19
    31cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e2       	ldi	r20, 0x20	; 32
    31d8:	51 e4       	ldi	r21, 0x41	; 65
    31da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	bc 01       	movw	r22, r24
    31e4:	cd 01       	movw	r24, r26
    31e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9c 8b       	std	Y+20, r25	; 0x14
    31f0:	8b 8b       	std	Y+19, r24	; 0x13
    31f2:	0f c0       	rjmp	.+30     	; 0x3212 <main+0xb7e>
    31f4:	80 e9       	ldi	r24, 0x90	; 144
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	9a 8b       	std	Y+18, r25	; 0x12
    31fa:	89 8b       	std	Y+17, r24	; 0x11
    31fc:	89 89       	ldd	r24, Y+17	; 0x11
    31fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <main+0xb6c>
    3204:	9a 8b       	std	Y+18, r25	; 0x12
    3206:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3208:	8b 89       	ldd	r24, Y+19	; 0x13
    320a:	9c 89       	ldd	r25, Y+20	; 0x14
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	9c 8b       	std	Y+20, r25	; 0x14
    3210:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3212:	8b 89       	ldd	r24, Y+19	; 0x13
    3214:	9c 89       	ldd	r25, Y+20	; 0x14
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	69 f7       	brne	.-38     	; 0x31f4 <main+0xb60>
    321a:	14 c0       	rjmp	.+40     	; 0x3244 <main+0xbb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	9c 8b       	std	Y+20, r25	; 0x14
    322e:	8b 8b       	std	Y+19, r24	; 0x13
    3230:	8b 89       	ldd	r24, Y+19	; 0x13
    3232:	9c 89       	ldd	r25, Y+20	; 0x14
    3234:	98 8b       	std	Y+16, r25	; 0x10
    3236:	8f 87       	std	Y+15, r24	; 0x0f
    3238:	8f 85       	ldd	r24, Y+15	; 0x0f
    323a:	98 89       	ldd	r25, Y+16	; 0x10
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <main+0xba8>
    3240:	98 8b       	std	Y+16, r25	; 0x10
    3242:	8f 87       	std	Y+15, r24	; 0x0f
    		  _delay_ms(1000);
    		  LCD_ClearScreen();
    3244:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>
    		  do
    		  {
    			  option=getPressed();
    3248:	0e 94 13 0b 	call	0x1626	; 0x1626 <getPressed>
    324c:	fe 01       	movw	r30, r28
    324e:	e1 58       	subi	r30, 0x81	; 129
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 83       	st	Z, r24
    			  ADC_value=ADC_StartConversion(ADC0);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <ADC_StartConversion>
    325a:	fe 01       	movw	r30, r28
    325c:	e8 57       	subi	r30, 0x78	; 120
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 83       	st	Z, r24
    		  }while(option==0xff);
    3262:	fe 01       	movw	r30, r28
    3264:	e1 58       	subi	r30, 0x81	; 129
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	80 81       	ld	r24, Z
    326a:	8f 3f       	cpi	r24, 0xFF	; 255
    326c:	69 f3       	breq	.-38     	; 0x3248 <main+0xbb4>
    		  switch(option)
    326e:	fe 01       	movw	r30, r28
    3270:	e1 58       	subi	r30, 0x81	; 129
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	80 81       	ld	r24, Z
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	cf 56       	subi	r28, 0x6F	; 111
    327c:	df 4f       	sbci	r29, 0xFF	; 255
    327e:	39 83       	std	Y+1, r19	; 0x01
    3280:	28 83       	st	Y, r18
    3282:	c1 59       	subi	r28, 0x91	; 145
    3284:	d0 40       	sbci	r29, 0x00	; 0
    3286:	cf 56       	subi	r28, 0x6F	; 111
    3288:	df 4f       	sbci	r29, 0xFF	; 255
    328a:	88 81       	ld	r24, Y
    328c:	99 81       	ldd	r25, Y+1	; 0x01
    328e:	c1 59       	subi	r28, 0x91	; 145
    3290:	d0 40       	sbci	r29, 0x00	; 0
    3292:	83 33       	cpi	r24, 0x33	; 51
    3294:	91 05       	cpc	r25, r1
    3296:	09 f4       	brne	.+2      	; 0x329a <main+0xc06>
    3298:	09 c1       	rjmp	.+530    	; 0x34ac <main+0xe18>
    329a:	cf 56       	subi	r28, 0x6F	; 111
    329c:	df 4f       	sbci	r29, 0xFF	; 255
    329e:	e8 81       	ld	r30, Y
    32a0:	f9 81       	ldd	r31, Y+1	; 0x01
    32a2:	c1 59       	subi	r28, 0x91	; 145
    32a4:	d0 40       	sbci	r29, 0x00	; 0
    32a6:	e4 33       	cpi	r30, 0x34	; 52
    32a8:	f1 05       	cpc	r31, r1
    32aa:	a4 f4       	brge	.+40     	; 0x32d4 <main+0xc40>
    32ac:	cf 56       	subi	r28, 0x6F	; 111
    32ae:	df 4f       	sbci	r29, 0xFF	; 255
    32b0:	28 81       	ld	r18, Y
    32b2:	39 81       	ldd	r19, Y+1	; 0x01
    32b4:	c1 59       	subi	r28, 0x91	; 145
    32b6:	d0 40       	sbci	r29, 0x00	; 0
    32b8:	21 33       	cpi	r18, 0x31	; 49
    32ba:	31 05       	cpc	r19, r1
    32bc:	01 f1       	breq	.+64     	; 0x32fe <main+0xc6a>
    32be:	cf 56       	subi	r28, 0x6F	; 111
    32c0:	df 4f       	sbci	r29, 0xFF	; 255
    32c2:	88 81       	ld	r24, Y
    32c4:	99 81       	ldd	r25, Y+1	; 0x01
    32c6:	c1 59       	subi	r28, 0x91	; 145
    32c8:	d0 40       	sbci	r29, 0x00	; 0
    32ca:	82 33       	cpi	r24, 0x32	; 50
    32cc:	91 05       	cpc	r25, r1
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <main+0xc3e>
    32d0:	e7 c0       	rjmp	.+462    	; 0x34a0 <main+0xe0c>
    32d2:	90 cc       	rjmp	.-1760   	; 0x2bf4 <main+0x560>
    32d4:	cf 56       	subi	r28, 0x6F	; 111
    32d6:	df 4f       	sbci	r29, 0xFF	; 255
    32d8:	e8 81       	ld	r30, Y
    32da:	f9 81       	ldd	r31, Y+1	; 0x01
    32dc:	c1 59       	subi	r28, 0x91	; 145
    32de:	d0 40       	sbci	r29, 0x00	; 0
    32e0:	e4 33       	cpi	r30, 0x34	; 52
    32e2:	f1 05       	cpc	r31, r1
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <main+0xc54>
    32e6:	e8 c0       	rjmp	.+464    	; 0x34b8 <main+0xe24>
    32e8:	cf 56       	subi	r28, 0x6F	; 111
    32ea:	df 4f       	sbci	r29, 0xFF	; 255
    32ec:	28 81       	ld	r18, Y
    32ee:	39 81       	ldd	r19, Y+1	; 0x01
    32f0:	c1 59       	subi	r28, 0x91	; 145
    32f2:	d0 40       	sbci	r29, 0x00	; 0
    32f4:	25 33       	cpi	r18, 0x35	; 53
    32f6:	31 05       	cpc	r19, r1
    32f8:	09 f4       	brne	.+2      	; 0x32fc <main+0xc68>
    32fa:	e4 c0       	rjmp	.+456    	; 0x34c4 <main+0xe30>
    32fc:	7b cc       	rjmp	.-1802   	; 0x2bf4 <main+0x560>
    		  {
    		  case '1':
    			  analog=(uint32)ADC_value * 5000UL /256UL;
    32fe:	fe 01       	movw	r30, r28
    3300:	e8 57       	subi	r30, 0x78	; 120
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 81       	ld	r24, Z
    3306:	88 2f       	mov	r24, r24
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	a0 e0       	ldi	r26, 0x00	; 0
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	28 e8       	ldi	r18, 0x88	; 136
    3310:	33 e1       	ldi	r19, 0x13	; 19
    3312:	40 e0       	ldi	r20, 0x00	; 0
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__mulsi3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	fe 01       	movw	r30, r28
    3324:	ec 57       	subi	r30, 0x7C	; 124
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	89 2f       	mov	r24, r25
    332a:	9a 2f       	mov	r25, r26
    332c:	ab 2f       	mov	r26, r27
    332e:	bb 27       	eor	r27, r27
    3330:	80 83       	st	Z, r24
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	a2 83       	std	Z+2, r26	; 0x02
    3336:	b3 83       	std	Z+3, r27	; 0x03
    			  temp=analog/10;
    3338:	fe 01       	movw	r30, r28
    333a:	ec 57       	subi	r30, 0x7C	; 124
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 81       	ld	r24, Z
    3340:	91 81       	ldd	r25, Z+1	; 0x01
    3342:	a2 81       	ldd	r26, Z+2	; 0x02
    3344:	b3 81       	ldd	r27, Z+3	; 0x03
    3346:	2a e0       	ldi	r18, 0x0A	; 10
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__udivmodsi4>
    3356:	da 01       	movw	r26, r20
    3358:	c9 01       	movw	r24, r18
    335a:	fe 01       	movw	r30, r28
    335c:	ed 57       	subi	r30, 0x7D	; 125
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	80 83       	st	Z, r24
    			  LCD_voidString("Temp=");
    3362:	8c ee       	ldi	r24, 0xEC	; 236
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    			  LCD_setPosition(1,6);
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	66 e0       	ldi	r22, 0x06	; 6
    336e:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_setPosition>
    			  LCD_WriteNum(temp);
    3372:	fe 01       	movw	r30, r28
    3374:	ed 57       	subi	r30, 0x7D	; 125
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_WriteNum>
    			  LCD_voidString(" C");
    337e:	82 ef       	ldi	r24, 0xF2	; 242
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidString>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	aa ef       	ldi	r26, 0xFA	; 250
    338c:	b4 e4       	ldi	r27, 0x44	; 68
    338e:	8b 87       	std	Y+11, r24	; 0x0b
    3390:	9c 87       	std	Y+12, r25	; 0x0c
    3392:	ad 87       	std	Y+13, r26	; 0x0d
    3394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	6b 85       	ldd	r22, Y+11	; 0x0b
    3398:	7c 85       	ldd	r23, Y+12	; 0x0c
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	55 e4       	ldi	r21, 0x45	; 69
    33a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	a9 87       	std	Y+9, r26	; 0x09
    33b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b6:	6f 81       	ldd	r22, Y+7	; 0x07
    33b8:	78 85       	ldd	r23, Y+8	; 0x08
    33ba:	89 85       	ldd	r24, Y+9	; 0x09
    33bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <main+0xd44>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <main+0xdc2>
	else if (__tmp > 65535)
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <main+0xdae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <main+0xda4>
    341a:	80 e9       	ldi	r24, 0x90	; 144
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0xd92>
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <main+0xd86>
    3440:	14 c0       	rjmp	.+40     	; 0x346a <main+0xdd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <main+0xdce>
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
    			  _delay_ms(2000);
    			  LCD_ClearScreen();
    346a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_ClearScreen>
    			  if(temp>30)
    346e:	fe 01       	movw	r30, r28
    3470:	ed 57       	subi	r30, 0x7D	; 125
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	8f 31       	cpi	r24, 0x1F	; 31
    3478:	30 f0       	brcs	.+12     	; 0x3486 <main+0xdf2>
    			  {
    			    DIO_setPinValue(DIO_PORTA,PIN2,HIGH);
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	62 e0       	ldi	r22, 0x02	; 2
    347e:	41 e0       	ldi	r20, 0x01	; 1
    3480:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    3484:	b7 cb       	rjmp	.-2194   	; 0x2bf4 <main+0x560>
    			  }
    			  else if(temp<30)
    3486:	fe 01       	movw	r30, r28
    3488:	ed 57       	subi	r30, 0x7D	; 125
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	8e 31       	cpi	r24, 0x1E	; 30
    3490:	08 f0       	brcs	.+2      	; 0x3494 <main+0xe00>
    3492:	b0 cb       	rjmp	.-2208   	; 0x2bf4 <main+0x560>
    			  {
    				  DIO_setPinValue(DIO_PORTA,PIN2,LOW);
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	62 e0       	ldi	r22, 0x02	; 2
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    349e:	aa cb       	rjmp	.-2220   	; 0x2bf4 <main+0x560>
    			  }
    			  break;

    		  case '2':
    			  DIO_setPinValue(DIO_PORTA,PIN2,HIGH);
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	62 e0       	ldi	r22, 0x02	; 2
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    34aa:	a4 cb       	rjmp	.-2232   	; 0x2bf4 <main+0x560>
    			  break;
    		  case '3':
    			  DIO_setPinValue(DIO_PORTA,PIN2,LOW);
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	62 e0       	ldi	r22, 0x02	; 2
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    34b6:	9e cb       	rjmp	.-2244   	; 0x2bf4 <main+0x560>
    			  break;
    		  case '4':
    			  DIO_setPinValue(DIO_PORTA,PIN1,HIGH);
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	41 e0       	ldi	r20, 0x01	; 1
    34be:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    34c2:	98 cb       	rjmp	.-2256   	; 0x2bf4 <main+0x560>
    			  break;
    		  case '5':
				  DIO_setPinValue(DIO_PORTA,PIN1,LOW);
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	61 e0       	ldi	r22, 0x01	; 1
    34c8:	40 e0       	ldi	r20, 0x00	; 0
    34ca:	0e 94 41 07 	call	0xe82	; 0xe82 <DIO_setPinValue>
    34ce:	92 cb       	rjmp	.-2268   	; 0x2bf4 <main+0x560>
    	}

    	}


    return 0;
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	90 e0       	ldi	r25, 0x00	; 0
}
    34d4:	ce 56       	subi	r28, 0x6E	; 110
    34d6:	df 4f       	sbci	r29, 0xFF	; 255
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	1f 91       	pop	r17
    34e8:	0f 91       	pop	r16
    34ea:	08 95       	ret

000034ec <__mulsi3>:
    34ec:	62 9f       	mul	r22, r18
    34ee:	d0 01       	movw	r26, r0
    34f0:	73 9f       	mul	r23, r19
    34f2:	f0 01       	movw	r30, r0
    34f4:	82 9f       	mul	r24, r18
    34f6:	e0 0d       	add	r30, r0
    34f8:	f1 1d       	adc	r31, r1
    34fa:	64 9f       	mul	r22, r20
    34fc:	e0 0d       	add	r30, r0
    34fe:	f1 1d       	adc	r31, r1
    3500:	92 9f       	mul	r25, r18
    3502:	f0 0d       	add	r31, r0
    3504:	83 9f       	mul	r24, r19
    3506:	f0 0d       	add	r31, r0
    3508:	74 9f       	mul	r23, r20
    350a:	f0 0d       	add	r31, r0
    350c:	65 9f       	mul	r22, r21
    350e:	f0 0d       	add	r31, r0
    3510:	99 27       	eor	r25, r25
    3512:	72 9f       	mul	r23, r18
    3514:	b0 0d       	add	r27, r0
    3516:	e1 1d       	adc	r30, r1
    3518:	f9 1f       	adc	r31, r25
    351a:	63 9f       	mul	r22, r19
    351c:	b0 0d       	add	r27, r0
    351e:	e1 1d       	adc	r30, r1
    3520:	f9 1f       	adc	r31, r25
    3522:	bd 01       	movw	r22, r26
    3524:	cf 01       	movw	r24, r30
    3526:	11 24       	eor	r1, r1
    3528:	08 95       	ret

0000352a <__udivmodqi4>:
    352a:	99 1b       	sub	r25, r25
    352c:	79 e0       	ldi	r23, 0x09	; 9
    352e:	04 c0       	rjmp	.+8      	; 0x3538 <__udivmodqi4_ep>

00003530 <__udivmodqi4_loop>:
    3530:	99 1f       	adc	r25, r25
    3532:	96 17       	cp	r25, r22
    3534:	08 f0       	brcs	.+2      	; 0x3538 <__udivmodqi4_ep>
    3536:	96 1b       	sub	r25, r22

00003538 <__udivmodqi4_ep>:
    3538:	88 1f       	adc	r24, r24
    353a:	7a 95       	dec	r23
    353c:	c9 f7       	brne	.-14     	; 0x3530 <__udivmodqi4_loop>
    353e:	80 95       	com	r24
    3540:	08 95       	ret

00003542 <__udivmodsi4>:
    3542:	a1 e2       	ldi	r26, 0x21	; 33
    3544:	1a 2e       	mov	r1, r26
    3546:	aa 1b       	sub	r26, r26
    3548:	bb 1b       	sub	r27, r27
    354a:	fd 01       	movw	r30, r26
    354c:	0d c0       	rjmp	.+26     	; 0x3568 <__udivmodsi4_ep>

0000354e <__udivmodsi4_loop>:
    354e:	aa 1f       	adc	r26, r26
    3550:	bb 1f       	adc	r27, r27
    3552:	ee 1f       	adc	r30, r30
    3554:	ff 1f       	adc	r31, r31
    3556:	a2 17       	cp	r26, r18
    3558:	b3 07       	cpc	r27, r19
    355a:	e4 07       	cpc	r30, r20
    355c:	f5 07       	cpc	r31, r21
    355e:	20 f0       	brcs	.+8      	; 0x3568 <__udivmodsi4_ep>
    3560:	a2 1b       	sub	r26, r18
    3562:	b3 0b       	sbc	r27, r19
    3564:	e4 0b       	sbc	r30, r20
    3566:	f5 0b       	sbc	r31, r21

00003568 <__udivmodsi4_ep>:
    3568:	66 1f       	adc	r22, r22
    356a:	77 1f       	adc	r23, r23
    356c:	88 1f       	adc	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	1a 94       	dec	r1
    3572:	69 f7       	brne	.-38     	; 0x354e <__udivmodsi4_loop>
    3574:	60 95       	com	r22
    3576:	70 95       	com	r23
    3578:	80 95       	com	r24
    357a:	90 95       	com	r25
    357c:	9b 01       	movw	r18, r22
    357e:	ac 01       	movw	r20, r24
    3580:	bd 01       	movw	r22, r26
    3582:	cf 01       	movw	r24, r30
    3584:	08 95       	ret

00003586 <__prologue_saves__>:
    3586:	2f 92       	push	r2
    3588:	3f 92       	push	r3
    358a:	4f 92       	push	r4
    358c:	5f 92       	push	r5
    358e:	6f 92       	push	r6
    3590:	7f 92       	push	r7
    3592:	8f 92       	push	r8
    3594:	9f 92       	push	r9
    3596:	af 92       	push	r10
    3598:	bf 92       	push	r11
    359a:	cf 92       	push	r12
    359c:	df 92       	push	r13
    359e:	ef 92       	push	r14
    35a0:	ff 92       	push	r15
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	ca 1b       	sub	r28, r26
    35b0:	db 0b       	sbc	r29, r27
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	09 94       	ijmp

000035be <__epilogue_restores__>:
    35be:	2a 88       	ldd	r2, Y+18	; 0x12
    35c0:	39 88       	ldd	r3, Y+17	; 0x11
    35c2:	48 88       	ldd	r4, Y+16	; 0x10
    35c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    35c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    35c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    35cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    35d0:	b9 84       	ldd	r11, Y+9	; 0x09
    35d2:	c8 84       	ldd	r12, Y+8	; 0x08
    35d4:	df 80       	ldd	r13, Y+7	; 0x07
    35d6:	ee 80       	ldd	r14, Y+6	; 0x06
    35d8:	fd 80       	ldd	r15, Y+5	; 0x05
    35da:	0c 81       	ldd	r16, Y+4	; 0x04
    35dc:	1b 81       	ldd	r17, Y+3	; 0x03
    35de:	aa 81       	ldd	r26, Y+2	; 0x02
    35e0:	b9 81       	ldd	r27, Y+1	; 0x01
    35e2:	ce 0f       	add	r28, r30
    35e4:	d1 1d       	adc	r29, r1
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	f8 94       	cli
    35ea:	de bf       	out	0x3e, r29	; 62
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	cd bf       	out	0x3d, r28	; 61
    35f0:	ed 01       	movw	r28, r26
    35f2:	08 95       	ret

000035f4 <_exit>:
    35f4:	f8 94       	cli

000035f6 <__stop_program>:
    35f6:	ff cf       	rjmp	.-2      	; 0x35f6 <__stop_program>
